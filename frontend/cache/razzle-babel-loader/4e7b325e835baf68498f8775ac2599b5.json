{"ast":null,"code":"/**\n * Authomatic Login\n * @module actions/auth/authomatic\n */\nimport config from '@plone/volto/registry';\nimport { AUTHOMATIC_REDIRECT, LOGIN } from '../../constants/ActionTypes';\n/**\n * Get information to redicect user to provider authentication page\n * @function authomaticRedirect\n * @param {string} providerId OAuth provider id.\n * @returns {Object} Authomatic redirect action.\n */\n\nexport function authomaticRedirect(providerId) {\n  const publicUrl = config.settings.publicURL;\n  return {\n    type: AUTHOMATIC_REDIRECT,\n    request: {\n      op: 'get',\n      path: `@login-authomatic/${providerId}?publicUrl=${publicUrl}`\n    }\n  };\n}\n/**\n * Authomatic Login function.\n * @function authomaticLogin\n * @param {string} providerId OAuth provider id.\n * @param {string} query URL parameters passed by OAuth provider.\n * @param {string} session Authomatic session id.\n * @returns {Object} Authomatic login action.\n */\n\nexport function authomaticLogin(providerId, query, session) {\n  const publicUrl = config.settings.publicURL;\n  return {\n    type: LOGIN,\n    request: {\n      op: 'post',\n      path: `@login-authomatic/${providerId}`,\n      data: {\n        qs: query,\n        session: session,\n        publicUrl: publicUrl\n      }\n    }\n  };\n}","map":{"version":3,"names":["config","AUTHOMATIC_REDIRECT","LOGIN","authomaticRedirect","providerId","publicUrl","settings","publicURL","type","request","op","path","authomaticLogin","query","session","data","qs"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone-collective/volto-authomatic/src/actions/auth/authomatic.js"],"sourcesContent":["/**\n * Authomatic Login\n * @module actions/auth/authomatic\n */\nimport config from '@plone/volto/registry';\nimport { AUTHOMATIC_REDIRECT, LOGIN } from '../../constants/ActionTypes';\n\n/**\n * Get information to redicect user to provider authentication page\n * @function authomaticRedirect\n * @param {string} providerId OAuth provider id.\n * @returns {Object} Authomatic redirect action.\n */\nexport function authomaticRedirect(providerId) {\n  const publicUrl = config.settings.publicURL;\n  return {\n    type: AUTHOMATIC_REDIRECT,\n    request: {\n      op: 'get',\n      path: `@login-authomatic/${providerId}?publicUrl=${publicUrl}`,\n    },\n  };\n}\n\n/**\n * Authomatic Login function.\n * @function authomaticLogin\n * @param {string} providerId OAuth provider id.\n * @param {string} query URL parameters passed by OAuth provider.\n * @param {string} session Authomatic session id.\n * @returns {Object} Authomatic login action.\n */\nexport function authomaticLogin(providerId, query, session) {\n  const publicUrl = config.settings.publicURL;\n  return {\n    type: LOGIN,\n    request: {\n      op: 'post',\n      path: `@login-authomatic/${providerId}`,\n      data: {\n        qs: query,\n        session: session,\n        publicUrl: publicUrl,\n      },\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,mBAAT,EAA8BC,KAA9B,QAA2C,6BAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;EAC7C,MAAMC,SAAS,GAAGL,MAAM,CAACM,QAAP,CAAgBC,SAAlC;EACA,OAAO;IACLC,IAAI,EAAEP,mBADD;IAELQ,OAAO,EAAE;MACPC,EAAE,EAAE,KADG;MAEPC,IAAI,EAAG,qBAAoBP,UAAW,cAAaC,SAAU;IAFtD;EAFJ,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,eAAT,CAAyBR,UAAzB,EAAqCS,KAArC,EAA4CC,OAA5C,EAAqD;EAC1D,MAAMT,SAAS,GAAGL,MAAM,CAACM,QAAP,CAAgBC,SAAlC;EACA,OAAO;IACLC,IAAI,EAAEN,KADD;IAELO,OAAO,EAAE;MACPC,EAAE,EAAE,MADG;MAEPC,IAAI,EAAG,qBAAoBP,UAAW,EAF/B;MAGPW,IAAI,EAAE;QACJC,EAAE,EAAEH,KADA;QAEJC,OAAO,EAAEA,OAFL;QAGJT,SAAS,EAAEA;MAHP;IAHC;EAFJ,CAAP;AAYD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}