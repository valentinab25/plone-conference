{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/components/View.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport Slider from 'react-slick';\nimport cx from 'classnames';\nimport { defineMessages, useIntl } from 'react-intl';\nimport Body from './Body';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport leftArrowSVG from '@plone/volto/icons/left-key.svg';\nimport teaserTemplate from '../icons/teaser-template.svg';\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    \"id\": \"Please choose an existing content as source for this element\",\n    \"defaultMessage\": \"Please choose an existing content as source for this element\"\n  }\n});\n\nconst PrevArrow = _ref => {\n  let {\n    className,\n    style,\n    onClick\n  } = _ref;\n  return __jsx(\"button\", {\n    className: className,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      display: 'block'\n    }),\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }\n  }, __jsx(Icon, {\n    name: leftArrowSVG,\n    size: \"48px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n};\n\n_c = PrevArrow;\n\nconst NextArrow = _ref2 => {\n  let {\n    className,\n    style,\n    onClick\n  } = _ref2;\n  return __jsx(\"button\", {\n    className: className,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      display: 'block'\n    }),\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, __jsx(Icon, {\n    name: rightArrowSVG,\n    size: \"48px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }));\n};\n\n_c2 = NextArrow;\n\nconst SliderView = props => {\n  _s();\n\n  var _data$slides, _data$slides2;\n\n  const {\n    className,\n    data,\n    isEditMode,\n    block,\n    openObjectBrowser,\n    onChangeBlock,\n    slideIndex,\n    setSlideIndex\n  } = props;\n  const intl = useIntl();\n  const sliderRef = React.useRef();\n\n  if (sliderRef.current && isEditMode) {\n    // This syncs the current slide with the objectwidget (or other sources\n    // able to access the slider context)\n    // that can modify the SliderContext (and come here via props slideIndex)\n    sliderRef.current.slickGoTo(slideIndex);\n  }\n\n  return __jsx(\"div\", {\n    className: cx('block slider', className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, (((_data$slides = data.slides) === null || _data$slides === void 0 ? void 0 : _data$slides.length) === 0 || !data.slides) && isEditMode && __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"teaser-item default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: teaserTemplate,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, intl.formatMessage(messages.PleaseChooseContent)))), ((_data$slides2 = data.slides) === null || _data$slides2 === void 0 ? void 0 : _data$slides2.length) > 0 && __jsx(Slider, {\n    ref: sliderRef,\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    draggable: false,\n    nextArrow: __jsx(NextArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 22\n      }\n    }),\n    prevArrow: __jsx(PrevArrow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 22\n      }\n    }),\n    slideWidth: \"1200px\" // This syncs the current slide with the SliderContext state\n    // responding to the slide change event from the slider itself\n    // (the dots or the arrows)\n    // There's also the option of doing it before instead than after:\n    // beforeChange={(current, next) => setSlideIndex(next)}\n    ,\n    afterChange: current => isEditMode && setSlideIndex(current),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, data.slides && data.slides.map((item, index) => __jsx(\"div\", {\n    key: item['@id'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 15\n    }\n  }, __jsx(Body, _extends({}, props, {\n    key: item['@id'],\n    data: item,\n    isEditMode: isEditMode,\n    dataBlock: data,\n    index: index,\n    block: block,\n    openObjectBrowser: openObjectBrowser,\n    onChangeBlock: onChangeBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }))))));\n};\n\n_s(SliderView, \"KYSBK1tS+xuD3Med8xUCFdz0vcg=\", false, function () {\n  return [useIntl];\n});\n\n_c3 = SliderView;\nexport default _c4 = withBlockExtensions(SliderView);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PrevArrow\");\n$RefreshReg$(_c2, \"NextArrow\");\n$RefreshReg$(_c3, \"SliderView\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["React","Message","Slider","cx","defineMessages","useIntl","Body","withBlockExtensions","Icon","rightArrowSVG","leftArrowSVG","teaserTemplate","messages","PleaseChooseContent","PrevArrow","className","style","onClick","display","NextArrow","SliderView","props","data","isEditMode","block","openObjectBrowser","onChangeBlock","slideIndex","setSlideIndex","intl","sliderRef","useRef","current","slickGoTo","slides","length","formatMessage","map","item","index"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/components/View.jsx"],"sourcesContent":["import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport Slider from 'react-slick';\nimport cx from 'classnames';\nimport { defineMessages, useIntl } from 'react-intl';\nimport Body from './Body';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport leftArrowSVG from '@plone/volto/icons/left-key.svg';\nimport teaserTemplate from '../icons/teaser-template.svg';\n\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    id: 'Please choose an existing content as source for this element',\n    defaultMessage:\n      'Please choose an existing content as source for this element',\n  },\n});\n\nconst PrevArrow = ({ className, style, onClick }) => (\n  <button\n    className={className}\n    style={{ ...style, display: 'block' }}\n    onClick={onClick}\n  >\n    <Icon name={leftArrowSVG} size=\"48px\" />\n  </button>\n);\n\nconst NextArrow = ({ className, style, onClick }) => (\n  <button\n    className={className}\n    style={{ ...style, display: 'block' }}\n    onClick={onClick}\n  >\n    <Icon name={rightArrowSVG} size=\"48px\" />\n  </button>\n);\n\nconst SliderView = (props) => {\n  const {\n    className,\n    data,\n    isEditMode,\n    block,\n    openObjectBrowser,\n    onChangeBlock,\n    slideIndex,\n    setSlideIndex,\n  } = props;\n  const intl = useIntl();\n\n  const sliderRef = React.useRef();\n\n  if (sliderRef.current && isEditMode) {\n    // This syncs the current slide with the objectwidget (or other sources\n    // able to access the slider context)\n    // that can modify the SliderContext (and come here via props slideIndex)\n    sliderRef.current.slickGoTo(slideIndex);\n  }\n\n  return (\n    <div className={cx('block slider', className)}>\n      {(data.slides?.length === 0 || !data.slides) && isEditMode && (\n        <Message>\n          <div className=\"teaser-item default\">\n            <img src={teaserTemplate} alt=\"\" />\n            <p>{intl.formatMessage(messages.PleaseChooseContent)}</p>\n          </div>\n        </Message>\n      )}\n      {data.slides?.length > 0 && (\n        <Slider\n          ref={sliderRef}\n          dots\n          infinite\n          speed={500}\n          slidesToShow={1}\n          slidesToScroll={1}\n          draggable={false}\n          nextArrow={<NextArrow />}\n          prevArrow={<PrevArrow />}\n          slideWidth=\"1200px\"\n          // This syncs the current slide with the SliderContext state\n          // responding to the slide change event from the slider itself\n          // (the dots or the arrows)\n          // There's also the option of doing it before instead than after:\n          // beforeChange={(current, next) => setSlideIndex(next)}\n          afterChange={(current) => isEditMode && setSlideIndex(current)}\n        >\n          {data.slides &&\n            data.slides.map((item, index) => (\n              <div key={item['@id']}>\n                <Body\n                  {...props}\n                  key={item['@id']}\n                  data={item}\n                  isEditMode={isEditMode}\n                  dataBlock={data}\n                  index={index}\n                  block={block}\n                  openObjectBrowser={openObjectBrowser}\n                  onChangeBlock={onChangeBlock}\n                />\n              </div>\n            ))}\n        </Slider>\n      )}\n    </div>\n  );\n};\n\nexport default withBlockExtensions(SliderView);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Please choose an existing content as source for this element","defaultMessage":"Please choose an existing content as source for this element"}]}},"sourceType":"module"}