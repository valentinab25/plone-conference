{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\n\nvar _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Widgets/PanelsWidget.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport move from 'lodash-move';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport './editor.less';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add\",\n    \"defaultMessage\": \"Add\"\n  }\n});\nexport function moveItem(formData, source, destination) {\n  var _formData$blocks_layo;\n\n  return _objectSpread(_objectSpread({}, formData), {}, {\n    blocks_layout: {\n      items: move((_formData$blocks_layo = formData.blocks_layout) === null || _formData$blocks_layo === void 0 ? void 0 : _formData$blocks_layo.items, source, destination)\n    }\n  });\n}\n\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\n\nconst PanelsWidget = props => {\n  _s();\n\n  var _value$blocks_layout;\n\n  const intl = useIntl();\n  const {\n    fieldSet,\n    value = {},\n    id,\n    onChange,\n    schema\n  } = props;\n  const {\n    blocks = {}\n  } = value;\n  const itemsList = (((_value$blocks_layout = value.blocks_layout) === null || _value$blocks_layout === void 0 ? void 0 : _value$blocks_layout.items) || []).map(id => [id, blocks[id]]);\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n  return __jsx(\"div\", {\n    className: \"panels-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    noForInFieldLabel: true,\n    draggable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"add-item-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    compact: true,\n    icon: true,\n    \"aria-label\": objectSchema.addMessage || `${intl.formatMessage(messages.add)} ${objectSchema.title}`,\n    onClick: () => {\n      var _value$blocks_layout2;\n\n      const [newId, newData] = empty();\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        blocks: _objectSpread(_objectSpread({}, value.blocks), {}, {\n          [newId]: newData\n        }),\n        blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n          items: [...((_value$blocks_layout2 = value.blocks_layout) === null || _value$blocks_layout2 === void 0 ? void 0 : _value$blocks_layout2.items), newId]\n        })\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: addSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), \"\\xA0\", objectSchema.addMessage || `Add ${objectSchema.title}`))), __jsx(\"div\", {\n    className: \"items-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropList, {\n    forwardedAriaLabelledBy: `fieldset-${fieldSet || 'default'}-field-label-${id}`,\n    childList: itemsList,\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      const newFormData = moveItem(value, source.index, destination.index);\n      onChange(id, newFormData);\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, dragProps => {\n    var _value$blocks_layout3, _value$blocks_layout4;\n\n    const {\n      child,\n      childId,\n      index,\n      draginfo\n    } = dragProps;\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      key: childId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      className: \"panel-item\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, __jsx(\"button\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, child.title || `Panel ${index + 1}`), ((_value$blocks_layout3 = value.blocks_layout) === null || _value$blocks_layout3 === void 0 ? void 0 : (_value$blocks_layout4 = _value$blocks_layout3.items) === null || _value$blocks_layout4 === void 0 ? void 0 : _value$blocks_layout4.length) > 1 ? __jsx(\"button\", {\n      onClick: () => {\n        var _value$blocks_layout5;\n\n        const newFormData = _objectSpread(_objectSpread({}, value), {}, {\n          blocks: _omit(_objectSpread({}, value.blocks), [childId]),\n          blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n            items: _without([...((_value$blocks_layout5 = value.blocks_layout) === null || _value$blocks_layout5 === void 0 ? void 0 : _value$blocks_layout5.items)], childId)\n          })\n        });\n\n        onChange(id, newFormData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      color: \"#e40166\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 23\n      }\n    })) : ''));\n  })));\n};\n\n_s(PanelsWidget, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c = PanelsWidget;\nexport default PanelsWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"PanelsWidget\");","map":{"version":3,"names":["React","v4","uuid","move","useIntl","defineMessages","Button","Icon","FormFieldWrapper","DragDropList","emptyBlocksForm","addSVG","dragSVG","trashSVG","messages","add","moveItem","formData","source","destination","blocks_layout","items","empty","PanelsWidget","props","intl","fieldSet","value","id","onChange","schema","blocks","itemsList","map","objectSchema","addMessage","formatMessage","title","newId","newData","result","newFormData","index","dragProps","child","childId","draginfo","innerRef","draggableProps","position","visibility","display","dragHandleProps","length"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Widgets/PanelsWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { omit, without } from 'lodash';\nimport move from 'lodash-move';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nimport './editor.less';\n\nconst messages = defineMessages({\n  add: { id: 'Add', defaultMessage: 'Add' },\n});\n\nexport function moveItem(formData, source, destination) {\n  return {\n    ...formData,\n    blocks_layout: {\n      items: move(formData.blocks_layout?.items, source, destination),\n    },\n  };\n}\n\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\n\nconst PanelsWidget = (props) => {\n  const intl = useIntl();\n  const { fieldSet, value = {}, id, onChange, schema } = props;\n  const { blocks = {} } = value;\n  const itemsList = (value.blocks_layout?.items || []).map((id) => [\n    id,\n    blocks[id],\n  ]);\n\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n  return (\n    <div className=\"panels-widget\">\n      <FormFieldWrapper {...props} noForInFieldLabel draggable={false}>\n        <div className=\"add-item-button-wrapper\">\n          <Button\n            compact\n            icon\n            aria-label={\n              objectSchema.addMessage ||\n              `${intl.formatMessage(messages.add)} ${objectSchema.title}`\n            }\n            onClick={() => {\n              const [newId, newData] = empty();\n              onChange(id, {\n                ...value,\n                blocks: {\n                  ...value.blocks,\n                  [newId]: newData,\n                },\n                blocks_layout: {\n                  ...value.blocks_layout,\n                  items: [...value.blocks_layout?.items, newId],\n                },\n              });\n            }}\n          >\n            <Icon name={addSVG} size=\"18px\" />\n            &nbsp;\n            {/* Custom addMessage in schema, else default to english */}\n            {objectSchema.addMessage || `Add ${objectSchema.title}`}\n          </Button>\n        </div>\n      </FormFieldWrapper>\n      <div className=\"items-area\">\n        <DragDropList\n          forwardedAriaLabelledBy={`fieldset-${\n            fieldSet || 'default'\n          }-field-label-${id}`}\n          childList={itemsList}\n          onMoveItem={(result) => {\n            const { source, destination } = result;\n            if (!destination) {\n              return;\n            }\n            const newFormData = moveItem(\n              value,\n              source.index,\n              destination.index,\n            );\n            onChange(id, newFormData);\n            return true;\n          }}\n        >\n          {(dragProps) => {\n            const { child, childId, index, draginfo } = dragProps;\n            return (\n              <div\n                ref={draginfo.innerRef}\n                {...draginfo.draggableProps}\n                key={childId}\n              >\n                <div className=\"panel-item\" style={{ position: 'relative' }}>\n                  <button\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </button>\n                  <div className=\"label\">\n                    {child.title || `Panel ${index + 1}`}\n                  </div>\n                  {value.blocks_layout?.items?.length > 1 ? (\n                    <button\n                      onClick={() => {\n                        const newFormData = {\n                          ...value,\n                          blocks: omit({ ...value.blocks }, [childId]),\n                          blocks_layout: {\n                            ...value.blocks_layout,\n                            items: without(\n                              [...value.blocks_layout?.items],\n                              childId,\n                            ),\n                          },\n                        };\n                        onChange(id, newFormData);\n                      }}\n                    >\n                      <Icon name={trashSVG} size=\"18px\" color=\"#e40166\" />\n                    </button>\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n            );\n          }}\n        </DragDropList>\n      </div>\n    </div>\n  );\n};\n\nexport default PanelsWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add","defaultMessage":"Add"}]}},"sourceType":"module"}