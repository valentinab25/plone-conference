{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { TeaserBlockDefaultBody as DefaultBody } from '@kitconcept/volto-blocks-grid/components';\nimport config from '@plone/volto/registry';\n\nconst TeaserBody = props => {\n  var _data$href, _data$href$, _data$href2, _data$href2$, _config$resolve;\n\n  const {\n    variation,\n    data\n  } = props;\n  const hasType = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : (_data$href$ = _data$href[0]) === null || _data$href$ === void 0 ? void 0 : _data$href$['@type'];\n  const legacyVariationComponentName = hasType && `Teaser|${(_data$href2 = data.href) === null || _data$href2 === void 0 ? void 0 : (_data$href2$ = _data$href2[0]) === null || _data$href2$ === void 0 ? void 0 : _data$href2$['@type']}`; // Compatible with the previous version of the component registry\n  // and the Volto 16 one.\n\n  const BodyComponent = (config === null || config === void 0 ? void 0 : config.resolve) && (config === null || config === void 0 ? void 0 : (_config$resolve = config.resolve(legacyVariationComponentName)) === null || _config$resolve === void 0 ? void 0 : _config$resolve.component) || (config === null || config === void 0 ? void 0 : config.getComponent) && hasType && config.getComponent({\n    name: 'Teaser',\n    dependencies: [hasType]\n  }).component || (variation === null || variation === void 0 ? void 0 : variation.template) || DefaultBody;\n  return __jsx(BodyComponent, props);\n};\n\nexport default TeaserBody;","map":{"version":3,"names":["React","TeaserBlockDefaultBody","DefaultBody","config","TeaserBody","props","variation","data","hasType","href","legacyVariationComponentName","BodyComponent","resolve","component","getComponent","name","dependencies","template"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Teaser/Body.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TeaserBlockDefaultBody as DefaultBody } from '@kitconcept/volto-blocks-grid/components';\nimport config from '@plone/volto/registry';\n\nconst TeaserBody = (props) => {\n  const { variation, data } = props;\n\n  const hasType = data.href?.[0]?.['@type'];\n  const legacyVariationComponentName =\n    hasType && `Teaser|${data.href?.[0]?.['@type']}`;\n\n  // Compatible with the previous version of the component registry\n  // and the Volto 16 one.\n  const BodyComponent =\n    (config?.resolve &&\n      config?.resolve(legacyVariationComponentName)?.component) ||\n    (config?.getComponent &&\n      hasType &&\n      config.getComponent({ name: 'Teaser', dependencies: [hasType] })\n        .component) ||\n    variation?.template ||\n    DefaultBody;\n\n  return <BodyComponent {...props} />;\n};\n\nTeaserBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nexport default TeaserBody;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,sBAAsB,IAAIC,WAAnC,QAAsD,0CAAtD;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;EAAA;;EAC5B,MAAM;IAAEC,SAAF;IAAaC;EAAb,IAAsBF,KAA5B;EAEA,MAAMG,OAAO,iBAAGD,IAAI,CAACE,IAAR,8DAAG,WAAY,CAAZ,CAAH,gDAAG,YAAiB,OAAjB,CAAhB;EACA,MAAMC,4BAA4B,GAChCF,OAAO,IAAK,UAAD,eAAUD,IAAI,CAACE,IAAf,gEAAU,YAAY,CAAZ,CAAV,iDAAU,aAAiB,OAAjB,CAA0B,EADjD,CAJ4B,CAO5B;EACA;;EACA,MAAME,aAAa,GAChB,CAAAR,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAES,OAAR,MACCT,MADD,aACCA,MADD,0CACCA,MAAM,CAAES,OAAR,CAAgBF,4BAAhB,CADD,oDACC,gBAA+CG,SADhD,CAAD,IAEC,CAAAV,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEW,YAAR,KACCN,OADD,IAECL,MAAM,CAACW,YAAP,CAAoB;IAAEC,IAAI,EAAE,QAAR;IAAkBC,YAAY,EAAE,CAACR,OAAD;EAAhC,CAApB,EACGK,SALL,KAMAP,SANA,aAMAA,SANA,uBAMAA,SAAS,CAAEW,QANX,KAOAf,WARF;EAUA,OAAO,MAAC,aAAD,EAAmBG,KAAnB,CAAP;AACD,CApBD;;AA2BA,eAAeD,UAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}