{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\n\n/**\n * Edit title/description block.\n * @module volto-slate/blocks/Title/TitleBlockEdit\n */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Editor, Node, Transforms, Range, createEditor } from 'slate';\nimport { ReactEditor, Editable, Slate, withReact } from 'slate-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { P } from '@plone/volto-slate/constants';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Type the title\\u2026\",\n    \"defaultMessage\": \"Type the title\\u2026\"\n  }\n});\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n/**\n * Edit title block component.\n * @class TitleBlockEdit\n * @extends Component\n */\n\n\nexport const TitleBlockEdit = props => {\n  const {\n    block,\n    blockNode,\n    data,\n    detached,\n    editable,\n    index,\n    metadata,\n    onAddBlock,\n    onChangeField,\n    onFocusNextBlock,\n    onFocusPreviousBlock,\n    onSelectBlock,\n    properties,\n    selected\n  } = props;\n  const {\n    0: editor\n  } = useState(withReact(createEditor()));\n  const {\n    0: initialValue\n  } = useState([{\n    type: P,\n    children: [{\n      text: (metadata === null || metadata === void 0 ? void 0 : metadata['title']) || (properties === null || properties === void 0 ? void 0 : properties['title']) || ''\n    }]\n  }]);\n  const intl = useIntl();\n  const prevSelected = usePrevious(selected);\n  const text = useMemo(() => (metadata === null || metadata === void 0 ? void 0 : metadata['title']) || (properties === null || properties === void 0 ? void 0 : properties['title']) || '', [metadata, properties]);\n  const placeholder = useMemo(() => data.placeholder || intl.formatMessage(messages['title']), [data.placeholder, intl]);\n  const disableNewBlocks = useMemo(() => detached, [detached]);\n  useEffect(() => {\n    if (!prevSelected && selected) {\n      if (editor.selection && Range.isCollapsed(editor.selection)) {\n        // keep selection\n        ReactEditor.focus(editor);\n      } else {\n        // nothing is selected, move focus to end\n        ReactEditor.focus(editor);\n        Transforms.select(editor, Editor.end(editor, []));\n      }\n    }\n  }, [prevSelected, selected, editor]);\n  useEffect(() => {\n    // undo/redo handlerr\n    const oldText = Node.string(editor);\n\n    if (oldText !== text) {\n      Transforms.insertText(editor, text, {\n        at: [0, 0]\n      });\n    }\n  }, [editor, text]);\n  const handleChange = useCallback(() => {\n    const newText = Node.string(editor);\n\n    if (newText !== text) {\n      onChangeField('title', newText);\n    }\n  }, [editor, onChangeField, text]);\n  const handleKeyDown = useCallback(ev => {\n    if (ev.key === 'Return' || ev.key === 'Enter') {\n      ev.preventDefault();\n\n      if (!disableNewBlocks) {\n        onSelectBlock(onAddBlock(config.settings.defaultBlockType, index + 1));\n      }\n    } else if (ev.key === 'ArrowUp') {\n      ev.preventDefault();\n      onFocusPreviousBlock(block, blockNode.current);\n    } else if (ev.key === 'ArrowDown') {\n      ev.preventDefault();\n      onFocusNextBlock(block, blockNode.current);\n    }\n  }, [index, blockNode, disableNewBlocks, onSelectBlock, onAddBlock, onFocusPreviousBlock, onFocusNextBlock, block]);\n  const handleFocus = useCallback(() => {\n    onSelectBlock(block);\n  }, [block, onSelectBlock]);\n  const renderElement = useCallback(_ref => {\n    let {\n      attributes,\n      children\n    } = _ref;\n    return __jsx(\"h1\", _extends({}, attributes, {\n      className: \"documentFirstHeading\"\n    }), children);\n  }, []);\n\n  if (typeof window.__SERVER__ !== 'undefined') {\n    return __jsx(\"div\", null);\n  }\n\n  return __jsx(Slate, {\n    editor: editor,\n    onChange: handleChange,\n    value: initialValue\n  }, __jsx(Editable, {\n    readOnly: !editable,\n    onKeyDown: handleKeyDown,\n    placeholder: placeholder,\n    renderElement: renderElement,\n    onFocus: handleFocus\n  }));\n};\nTitleBlockEdit.defaultProps = {\n  detached: false,\n  editable: true\n};\nexport default TitleBlockEdit;","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","Editor","Node","Transforms","Range","createEditor","ReactEditor","Editable","Slate","withReact","defineMessages","useIntl","config","P","messages","title","usePrevious","value","ref","current","TitleBlockEdit","props","block","blockNode","data","detached","editable","index","metadata","onAddBlock","onChangeField","onFocusNextBlock","onFocusPreviousBlock","onSelectBlock","properties","selected","editor","initialValue","type","children","text","intl","prevSelected","placeholder","formatMessage","disableNewBlocks","selection","isCollapsed","focus","select","end","oldText","string","insertText","at","handleChange","newText","handleKeyDown","ev","key","preventDefault","settings","defaultBlockType","handleFocus","renderElement","attributes","window","__SERVER__","defaultProps"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Title/Edit.jsx"],"sourcesContent":["/**\n * Edit title/description block.\n * @module volto-slate/blocks/Title/TitleBlockEdit\n */\n\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Editor, Node, Transforms, Range, createEditor } from 'slate';\nimport { ReactEditor, Editable, Slate, withReact } from 'slate-react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { P } from '@plone/volto-slate/constants';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Type the title…',\n    defaultMessage: 'Type the title…',\n  },\n});\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n\n/**\n * Edit title block component.\n * @class TitleBlockEdit\n * @extends Component\n */\nexport const TitleBlockEdit = (props) => {\n  const {\n    block,\n    blockNode,\n    data,\n    detached,\n    editable,\n    index,\n    metadata,\n    onAddBlock,\n    onChangeField,\n    onFocusNextBlock,\n    onFocusPreviousBlock,\n    onSelectBlock,\n    properties,\n    selected,\n  } = props;\n\n  const [editor] = useState(withReact(createEditor()));\n  const [initialValue] = useState([\n    {\n      type: P,\n      children: [{ text: metadata?.['title'] || properties?.['title'] || '' }],\n    },\n  ]);\n\n  const intl = useIntl();\n\n  const prevSelected = usePrevious(selected);\n\n  const text = useMemo(\n    () => metadata?.['title'] || properties?.['title'] || '',\n    [metadata, properties],\n  );\n\n  const placeholder = useMemo(\n    () => data.placeholder || intl.formatMessage(messages['title']),\n    [data.placeholder, intl],\n  );\n  const disableNewBlocks = useMemo(() => detached, [detached]);\n\n  useEffect(() => {\n    if (!prevSelected && selected) {\n      if (editor.selection && Range.isCollapsed(editor.selection)) {\n        // keep selection\n        ReactEditor.focus(editor);\n      } else {\n        // nothing is selected, move focus to end\n        ReactEditor.focus(editor);\n        Transforms.select(editor, Editor.end(editor, []));\n      }\n    }\n  }, [prevSelected, selected, editor]);\n\n  useEffect(() => {\n    // undo/redo handlerr\n    const oldText = Node.string(editor);\n    if (oldText !== text) {\n      Transforms.insertText(editor, text, {\n        at: [0, 0],\n      });\n    }\n  }, [editor, text]);\n\n  const handleChange = useCallback(() => {\n    const newText = Node.string(editor);\n    if (newText !== text) {\n      onChangeField('title', newText);\n    }\n  }, [editor, onChangeField, text]);\n\n  const handleKeyDown = useCallback(\n    (ev) => {\n      if (ev.key === 'Return' || ev.key === 'Enter') {\n        ev.preventDefault();\n        if (!disableNewBlocks) {\n          onSelectBlock(\n            onAddBlock(config.settings.defaultBlockType, index + 1),\n          );\n        }\n      } else if (ev.key === 'ArrowUp') {\n        ev.preventDefault();\n        onFocusPreviousBlock(block, blockNode.current);\n      } else if (ev.key === 'ArrowDown') {\n        ev.preventDefault();\n        onFocusNextBlock(block, blockNode.current);\n      }\n    },\n    [\n      index,\n      blockNode,\n      disableNewBlocks,\n      onSelectBlock,\n      onAddBlock,\n      onFocusPreviousBlock,\n      onFocusNextBlock,\n      block,\n    ],\n  );\n\n  const handleFocus = useCallback(() => {\n    onSelectBlock(block);\n  }, [block, onSelectBlock]);\n\n  const renderElement = useCallback(({ attributes, children }) => {\n    return (\n      <h1 {...attributes} className=\"documentFirstHeading\">\n        {children}\n      </h1>\n    );\n  }, []);\n\n  if (typeof window.__SERVER__ !== 'undefined') {\n    return <div />;\n  }\n  return (\n    <Slate editor={editor} onChange={handleChange} value={initialValue}>\n      <Editable\n        readOnly={!editable}\n        onKeyDown={handleKeyDown}\n        placeholder={placeholder}\n        renderElement={renderElement}\n        onFocus={handleFocus}\n      ></Editable>\n    </Slate>\n  );\n};\n\nTitleBlockEdit.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  onChangeField: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  editable: PropTypes.bool,\n  detached: PropTypes.bool,\n  blockNode: PropTypes.any,\n};\n\nTitleBlockEdit.defaultProps = {\n  detached: false,\n  editable: true,\n};\n\nexport default TitleBlockEdit;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type the title…","defaultMessage":"Type the title…"}]}},"sourceType":"module"}