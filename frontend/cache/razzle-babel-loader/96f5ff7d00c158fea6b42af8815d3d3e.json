{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Checkbox, Header } from 'semantic-ui-react';\nimport { selectFacetSchemaEnhancer, selectFacetStateToValue, selectFacetValueToQuery } from './base';\n/**\n * A facet that uses radio/checkboxes to provide an explicit list of values for\n * filtering\n */\n\nconst CheckboxFacet = props => {\n  var _facet$title, _facet$field;\n\n  const {\n    facet,\n    choices,\n    isMulti,\n    onChange,\n    value,\n    isEditMode\n  } = props;\n  const facetValue = value;\n  return __jsx(\"div\", {\n    className: \"checkbox-facet\"\n  }, __jsx(Header, {\n    as: \"h4\"\n  }, (_facet$title = facet.title) !== null && _facet$title !== void 0 ? _facet$title : facet === null || facet === void 0 ? void 0 : (_facet$field = facet.field) === null || _facet$field === void 0 ? void 0 : _facet$field.label), __jsx(\"div\", {\n    className: \"entries\"\n  }, choices.map((_ref, i) => {\n    let {\n      label,\n      value\n    } = _ref;\n    return __jsx(\"div\", {\n      className: \"entry\",\n      key: value\n    }, __jsx(Checkbox, {\n      disabled: isEditMode,\n      label: label,\n      radio: !isMulti,\n      checked: isMulti ? !!(facetValue !== null && facetValue !== void 0 && facetValue.find(f => f.value === value)) : facetValue && facetValue.value === value,\n      onChange: (e, _ref2) => {\n        let {\n          checked\n        } = _ref2;\n        return onChange(facet.field.value, isMulti ? [...facetValue.filter(f => f.value !== value).map(f => f.value), ...(checked ? [value] : [])] : checked ? value : null);\n      }\n    }));\n  })));\n};\n\nCheckboxFacet.schemaEnhancer = selectFacetSchemaEnhancer;\nCheckboxFacet.stateToValue = selectFacetStateToValue;\nCheckboxFacet.valueToQuery = selectFacetValueToQuery;\nexport default CheckboxFacet;","map":{"version":3,"names":["React","Checkbox","Header","selectFacetSchemaEnhancer","selectFacetStateToValue","selectFacetValueToQuery","CheckboxFacet","props","facet","choices","isMulti","onChange","value","isEditMode","facetValue","title","field","label","map","i","find","f","e","checked","filter","schemaEnhancer","stateToValue","valueToQuery"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/CheckboxFacet.jsx"],"sourcesContent":["import React from 'react';\nimport { Checkbox, Header } from 'semantic-ui-react';\nimport {\n  selectFacetSchemaEnhancer,\n  selectFacetStateToValue,\n  selectFacetValueToQuery,\n} from './base';\n\n/**\n * A facet that uses radio/checkboxes to provide an explicit list of values for\n * filtering\n */\nconst CheckboxFacet = (props) => {\n  const { facet, choices, isMulti, onChange, value, isEditMode } = props;\n  const facetValue = value;\n\n  return (\n    <div className=\"checkbox-facet\">\n      <Header as=\"h4\">{facet.title ?? facet?.field?.label}</Header>\n      <div className=\"entries\">\n        {choices.map(({ label, value }, i) => (\n          <div className=\"entry\" key={value}>\n            <Checkbox\n              disabled={isEditMode}\n              label={label}\n              radio={!isMulti}\n              checked={\n                isMulti\n                  ? !!facetValue?.find((f) => f.value === value)\n                  : facetValue && facetValue.value === value\n              }\n              onChange={(e, { checked }) =>\n                onChange(\n                  facet.field.value,\n                  isMulti\n                    ? [\n                        ...facetValue\n                          .filter((f) => f.value !== value)\n                          .map((f) => f.value),\n                        ...(checked ? [value] : []),\n                      ]\n                    : checked\n                    ? value\n                    : null,\n                )\n              }\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nCheckboxFacet.schemaEnhancer = selectFacetSchemaEnhancer;\nCheckboxFacet.stateToValue = selectFacetStateToValue;\nCheckboxFacet.valueToQuery = selectFacetValueToQuery;\n\nexport default CheckboxFacet;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,mBAAjC;AACA,SACEC,yBADF,EAEEC,uBAFF,EAGEC,uBAHF,QAIO,QAJP;AAMA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;EAAA;;EAC/B,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC,OAAlB;IAA2BC,QAA3B;IAAqCC,KAArC;IAA4CC;EAA5C,IAA2DN,KAAjE;EACA,MAAMO,UAAU,GAAGF,KAAnB;EAEA,OACE;IAAK,SAAS,EAAC;EAAf,GACE,MAAC,MAAD;IAAQ,EAAE,EAAC;EAAX,mBAAiBJ,KAAK,CAACO,KAAvB,uDAAgCP,KAAhC,aAAgCA,KAAhC,uCAAgCA,KAAK,CAAEQ,KAAvC,iDAAgC,aAAcC,KAA9C,CADF,EAEE;IAAK,SAAS,EAAC;EAAf,GACGR,OAAO,CAACS,GAAR,CAAY,OAAmBC,CAAnB;IAAA,IAAC;MAAEF,KAAF;MAASL;IAAT,CAAD;IAAA,OACX;MAAK,SAAS,EAAC,OAAf;MAAuB,GAAG,EAAEA;IAA5B,GACE,MAAC,QAAD;MACE,QAAQ,EAAEC,UADZ;MAEE,KAAK,EAAEI,KAFT;MAGE,KAAK,EAAE,CAACP,OAHV;MAIE,OAAO,EACLA,OAAO,GACH,CAAC,EAACI,UAAD,aAACA,UAAD,eAACA,UAAU,CAAEM,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACT,KAAF,KAAYA,KAApC,CAAD,CADE,GAEHE,UAAU,IAAIA,UAAU,CAACF,KAAX,KAAqBA,KAP3C;MASE,QAAQ,EAAE,CAACU,CAAD;QAAA,IAAI;UAAEC;QAAF,CAAJ;QAAA,OACRZ,QAAQ,CACNH,KAAK,CAACQ,KAAN,CAAYJ,KADN,EAENF,OAAO,GACH,CACE,GAAGI,UAAU,CACVU,MADA,CACQH,CAAD,IAAOA,CAAC,CAACT,KAAF,KAAYA,KAD1B,EAEAM,GAFA,CAEKG,CAAD,IAAOA,CAAC,CAACT,KAFb,CADL,EAIE,IAAIW,OAAO,GAAG,CAACX,KAAD,CAAH,GAAa,EAAxB,CAJF,CADG,GAOHW,OAAO,GACPX,KADO,GAEP,IAXE,CADA;MAAA;IATZ,EADF,CADW;EAAA,CAAZ,CADH,CAFF,CADF;AAoCD,CAxCD;;AA0CAN,aAAa,CAACmB,cAAd,GAA+BtB,yBAA/B;AACAG,aAAa,CAACoB,YAAd,GAA6BtB,uBAA7B;AACAE,aAAa,CAACqB,YAAd,GAA6BtB,uBAA7B;AAEA,eAAeC,aAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}