{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _isEqual from \"lodash/isEqual\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { Field, Icon } from '@plone/volto/components';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nconst messages = defineMessages({\n  editValues: {\n    \"id\": \"Edit values\",\n    \"defaultMessage\": \"Edit values\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  thereWereSomeErrors: {\n    \"id\": \"There were some errors\",\n    \"defaultMessage\": \"There were some errors\"\n  }\n});\n\nconst InlineForm = props => {\n  const {\n    block,\n    description,\n    error,\n    // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    footer,\n    focusIndex,\n    intl\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find(o => o.id === 'default');\n  const other = schema.fieldsets.filter(o => o.id !== 'default');\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n    const initialData = _objectSpread(_objectSpread({}, Object.keys(objectSchema.properties).reduce((accumulator, currentField) => {\n      return objectSchema.properties[currentField].default ? _objectSpread(_objectSpread({}, accumulator), {}, {\n        [currentField]: objectSchema.properties[currentField].default\n      }) : accumulator;\n    }, {})), formData);\n\n    Object.keys(initialData).forEach(k => {\n      if (!_isEqual(initialData[k], formData === null || formData === void 0 ? void 0 : formData[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const {\n      index\n    } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n    setCurrentActiveFieldset(newIndex);\n  }\n\n  return __jsx(\"div\", {\n    className: \"ui form\"\n  }, title && __jsx(\"header\", {\n    className: \"header pulled\"\n  }, icon, __jsx(\"h2\", null, title || _(messages.editValues)), headerActions), description && __jsx(Segment, {\n    secondary: true,\n    className: \"attached\"\n  }, description), _keys(errors).length > 0 && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: _(messages.thereWereSomeErrors)\n  }), error && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: error.message\n  }), __jsx(\"div\", {\n    id: `blockform-fieldset-${defaultFieldset.id}`\n  }, __jsx(Segment, {\n    className: \"form attached\"\n  }, _map(defaultFieldset.fields, (field, index) => __jsx(Field, _extends({}, schema.properties[field], {\n    id: field,\n    fieldSet: defaultFieldset.title.toLowerCase(),\n    focus: index === focusIndex,\n    value: formData[field],\n    required: schema.required.indexOf(field) !== -1,\n    onChange: (id, value) => {\n      onChangeField(id, value);\n    },\n    key: field,\n    error: errors[field],\n    block: block\n  }))))), other.map((fieldset, index) => __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    key: fieldset.id\n  }, __jsx(\"div\", {\n    key: fieldset.id,\n    id: `blockform-fieldset-${fieldset.id}`\n  }, __jsx(Accordion.Title, {\n    active: currentActiveFieldset === index,\n    index: index,\n    onClick: handleCurrentActiveFieldset\n  }, fieldset.title && __jsx(React.Fragment, null, fieldset.title), currentActiveFieldset === index ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\"\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\"\n  })), __jsx(Accordion.Content, {\n    active: currentActiveFieldset === index\n  }, __jsx(AnimateHeight, {\n    animateOpacity: true,\n    duration: 500,\n    height: currentActiveFieldset === index ? 'auto' : 0\n  }, __jsx(Segment, {\n    className: \"attached\"\n  }, _map(fieldset.fields, field => __jsx(Field, _extends({}, schema.properties[field], {\n    id: field,\n    value: formData[field],\n    required: schema.required.indexOf(field) !== -1,\n    onChange: (id, value) => {\n      onChangeField(id, value);\n    },\n    key: field,\n    error: errors[field],\n    block: block\n  }))))))))), footer);\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null\n};\nexport default injectIntl(InlineForm, {\n  forwardRef: true\n});","map":{"version":3,"names":["React","Accordion","Segment","Message","defineMessages","injectIntl","AnimateHeight","Field","Icon","upSVG","downSVG","messages","editValues","error","thereWereSomeErrors","InlineForm","props","block","description","errors","formData","onChangeField","schema","title","icon","headerActions","footer","focusIndex","intl","_","formatMessage","defaultFieldset","fieldsets","find","o","id","other","filter","useEffect","objectSchema","initialData","Object","keys","properties","reduce","accumulator","currentField","default","forEach","k","currentActiveFieldset","setCurrentActiveFieldset","useState","handleCurrentActiveFieldset","e","blockProps","index","newIndex","length","message","fields","field","toLowerCase","required","indexOf","value","map","fieldset","defaultProps","forwardRef"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { keys, map, isEqual } from 'lodash';\n\nimport { Field, Icon } from '@plone/volto/components';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  editValues: {\n    id: 'Edit values',\n    defaultMessage: 'Edit values',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors',\n    defaultMessage: 'There were some errors',\n  },\n});\n\nconst InlineForm = (props) => {\n  const {\n    block,\n    description,\n    error, // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    footer,\n    focusIndex,\n    intl,\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find((o) => o.id === 'default');\n  const other = schema.fieldsets.filter((o) => o.id !== 'default');\n\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    const initialData = {\n      ...Object.keys(objectSchema.properties).reduce(\n        (accumulator, currentField) => {\n          return objectSchema.properties[currentField].default\n            ? {\n                ...accumulator,\n                [currentField]: objectSchema.properties[currentField].default,\n              }\n            : accumulator;\n        },\n        {},\n      ),\n      ...formData,\n    };\n\n    Object.keys(initialData).forEach((k) => {\n      if (!isEqual(initialData[k], formData?.[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n\n    setCurrentActiveFieldset(newIndex);\n  }\n\n  return (\n    <div className=\"ui form\">\n      {title && (\n        <header className=\"header pulled\">\n          {icon}\n          <h2>{title || _(messages.editValues)}</h2>\n          {headerActions}\n        </header>\n      )}\n      {description && (\n        <Segment secondary className=\"attached\">\n          {description}\n        </Segment>\n      )}\n      {keys(errors).length > 0 && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={_(messages.thereWereSomeErrors)}\n        />\n      )}\n      {error && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={error.message}\n        />\n      )}\n\n      <div id={`blockform-fieldset-${defaultFieldset.id}`}>\n        <Segment className=\"form attached\">\n          {map(defaultFieldset.fields, (field, index) => (\n            <Field\n              {...schema.properties[field]}\n              id={field}\n              fieldSet={defaultFieldset.title.toLowerCase()}\n              focus={index === focusIndex}\n              value={formData[field]}\n              required={schema.required.indexOf(field) !== -1}\n              onChange={(id, value) => {\n                onChangeField(id, value);\n              }}\n              key={field}\n              error={errors[field]}\n              block={block}\n            />\n          ))}\n        </Segment>\n      </div>\n\n      {other.map((fieldset, index) => (\n        <Accordion fluid styled className=\"form\" key={fieldset.id}>\n          <div key={fieldset.id} id={`blockform-fieldset-${fieldset.id}`}>\n            <Accordion.Title\n              active={currentActiveFieldset === index}\n              index={index}\n              onClick={handleCurrentActiveFieldset}\n            >\n              {fieldset.title && <>{fieldset.title}</>}\n              {currentActiveFieldset === index ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={currentActiveFieldset === index}>\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={currentActiveFieldset === index ? 'auto' : 0}\n              >\n                <Segment className=\"attached\">\n                  {map(fieldset.fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={formData[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={(id, value) => {\n                        onChangeField(id, value);\n                      }}\n                      key={field}\n                      error={errors[field]}\n                      block={block}\n                    />\n                  ))}\n                </Segment>\n              </AnimateHeight>\n            </Accordion.Content>\n          </div>\n        </Accordion>\n      ))}\n      {footer}\n    </div>\n  );\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null,\n};\n\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(\n      PropTypes.shape({\n        fields: PropTypes.arrayOf(PropTypes.string),\n        id: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string),\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string,\n  }),\n  focusIndex: PropTypes.number,\n};\n\nexport default injectIntl(InlineForm, { forwardRef: true });\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit values","defaultMessage":"Edit values"},{"id":"Error","defaultMessage":"Error"},{"id":"There were some errors","defaultMessage":"There were some errors"}]}},"sourceType":"module"}