{"ast":null,"code":"import _map from \"lodash/map\";\nvar __jsx = React.createElement;\n\n/**\n * Contents item component.\n * @module components/manage/Contents/ContentsItem\n */\nimport React from 'react';\nimport { Button, Table, Menu, Divider } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { Circle, FormattedDate, Icon, Popup } from '@plone/volto/components';\nimport { getContentIcon } from '@plone/volto/helpers';\nimport moreSVG from '@plone/volto/icons/more.svg';\nimport checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\nimport checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport moveUpSVG from '@plone/volto/icons/move-up.svg';\nimport moveDownSVG from '@plone/volto/icons/move-down.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport cx from 'classnames';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  private: {\n    \"id\": \"private\",\n    \"defaultMessage\": \"Private\"\n  },\n  published: {\n    \"id\": \"published\",\n    \"defaultMessage\": \"Published\"\n  },\n  intranet: {\n    \"id\": \"intranet\",\n    \"defaultMessage\": \"Intranet\"\n  },\n  draft: {\n    \"id\": \"draft\",\n    \"defaultMessage\": \"Draft\"\n  },\n  no_workflow_state: {\n    \"id\": \"no workflow state\",\n    \"defaultMessage\": \"No workflow state\"\n  },\n  none: {\n    \"id\": \"None\",\n    \"defaultMessage\": \"None\"\n  }\n});\n\nfunction getColor(string) {\n  switch (string) {\n    case 'private':\n      return '#ed4033';\n\n    case 'published':\n      return '#007bc1';\n\n    case 'intranet':\n      return '#51aa55';\n\n    case 'draft':\n      return '#f6a808';\n\n    default:\n      return 'grey';\n  }\n}\n/**\n * Contents item component class.\n * @function ContentsItemComponent\n * @returns {string} Markup of the component.\n */\n\n\nexport const ContentsItemComponent = ({\n  item,\n  selected,\n  onClick,\n  indexes,\n  onCut,\n  onCopy,\n  onDelete,\n  onMoveToTop,\n  onMoveToBottom,\n  connectDragPreview,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  order\n}) => {\n  const intl = useIntl();\n  return connectDropTarget(connectDragPreview(__jsx(\"tr\", {\n    key: item['@id'],\n    className: cx('', {\n      'dragging-row': isDragging\n    })\n  }, __jsx(Table.Cell, {\n    className: cx('', {\n      'dragging-cell': isDragging\n    })\n  }, connectDragSource(__jsx(\"div\", {\n    style: {\n      display: 'inline-block'\n    }\n  }, __jsx(Button, {\n    icon: true,\n    basic: true\n  }, __jsx(Icon, {\n    name: dragSVG,\n    size: \"20px\",\n    color: \"#878f93\",\n    className: \"content drag handle\"\n  }))))), __jsx(Table.Cell, {\n    className: cx('', {\n      'dragging-cell': isDragging\n    })\n  }, selected ? __jsx(Button, {\n    icon: true,\n    basic: true,\n    \"aria-label\": \"Unchecked\",\n    onClick: e => onClick(e, item['@id'])\n  }, __jsx(Icon, {\n    name: checkboxCheckedSVG,\n    color: \"#007eb1\",\n    size: \"24px\",\n    className: \"checked\"\n  })) : __jsx(Button, {\n    icon: true,\n    basic: true,\n    \"aria-label\": \"Checked\",\n    onClick: e => onClick(e, item['@id'])\n  }, __jsx(Icon, {\n    name: checkboxUncheckedSVG,\n    color: \"#826a6a\",\n    size: \"24px\",\n    className: \"unchecked\"\n  }))), __jsx(Table.Cell, {\n    className: cx('', {\n      'dragging-cell': isDragging\n    })\n  }, __jsx(Link, {\n    className: \"icon-align-name\",\n    to: `${item['@id']}${item.is_folderish ? '/contents' : ''}`\n  }, __jsx(\"div\", {\n    className: \"expire-align\"\n  }, __jsx(Icon, {\n    name: getContentIcon(item['@type'], item.is_folderish),\n    size: \"20px\",\n    className: \"icon-margin\",\n    color: \"#878f93\",\n    title: item['Type'] || item['@type']\n  }), ' ', __jsx(\"span\", {\n    title: item.title\n  }, \" \", item.title)), item.ExpirationDate !== 'None' && new Date(item.ExpirationDate).getTime() < new Date().getTime() && __jsx(Button, {\n    className: \"button-margin\",\n    size: \"mini\"\n  }, __jsx(FormattedMessage, {\n    id: \"Expired\",\n    defaultMessage: \"Expired\"\n  })))), _map(indexes, index => {\n    var _item$index$id;\n\n    return __jsx(Table.Cell, {\n      className: cx('', {\n        'dragging-cell': isDragging\n      }),\n      key: index.id\n    }, index.type === 'boolean' && (item[index.id] ? __jsx(FormattedMessage, {\n      id: \"Yes\",\n      defaultMessage: \"Yes\"\n    }) : __jsx(FormattedMessage, {\n      id: \"No\",\n      defaultMessage: \"No\"\n    })), index.type === 'string' && index.id !== 'review_state' && item[index.id], index.id === 'review_state' && __jsx(\"div\", null, __jsx(\"span\", null, __jsx(Circle, {\n      color: getColor(item[index.id]),\n      size: \"15px\"\n    })), messages[item[index.id]] ? intl.formatMessage(messages[item[index.id]]) : item['review_title'] || item['review_state'] || intl.formatMessage(messages.no_workflow_state)), index.type === 'date' && __jsx(React.Fragment, null, item[index === null || index === void 0 ? void 0 : index.id] && item[index.id] !== 'None' ? __jsx(FormattedDate, {\n      date: item[index.id]\n    }) : intl.formatMessage(messages.none)), index.type === 'array' && __jsx(\"span\", null, (_item$index$id = item[index.id]) === null || _item$index$id === void 0 ? void 0 : _item$index$id.join(', ')));\n  }), __jsx(Table.Cell, {\n    className: cx('', {\n      'dragging-cell': isDragging\n    }),\n    textAlign: \"right\"\n  }, __jsx(Popup, {\n    menu: true,\n    position: \"bottom right\",\n    flowing: true,\n    basic: true,\n    on: \"click\",\n    popper: {\n      className: 'dropdown-popup'\n    },\n    trigger: __jsx(Icon, {\n      name: moreSVG,\n      className: \"dropdown-popup-trigger\",\n      size: \"24px\",\n      color: \"#007eb1\"\n    })\n  }, __jsx(Menu, {\n    vertical: true,\n    borderless: true,\n    fluid: true\n  }, __jsx(Link, {\n    className: \"item icon-align\",\n    to: `${item['@id']}/edit`\n  }, __jsx(Icon, {\n    name: editingSVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Edit\",\n    defaultMessage: \"Edit\"\n  })), __jsx(Link, {\n    className: \"item right-dropdown icon-align\",\n    to: item['@id']\n  }, __jsx(Icon, {\n    name: showSVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"View\",\n    defaultMessage: \"View\"\n  })), __jsx(Divider, null), __jsx(Menu.Item, {\n    onClick: onCut,\n    value: item['@id'],\n    className: \"right-dropdown icon-align\"\n  }, __jsx(Icon, {\n    name: cutSVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Cut\",\n    defaultMessage: \"Cut\"\n  })), __jsx(Menu.Item, {\n    onClick: onCopy,\n    value: item['@id'],\n    className: \"right-dropdown icon-align\"\n  }, __jsx(Icon, {\n    name: copySVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Copy\",\n    defaultMessage: \"Copy\"\n  })), __jsx(Menu.Item, {\n    onClick: onDelete,\n    value: item['@id'],\n    className: \"right-dropdown icon-align\"\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    color: \"#e40166\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Delete\",\n    defaultMessage: \"Delete\"\n  })), __jsx(Divider, null), __jsx(Menu.Item, {\n    onClick: onMoveToTop,\n    value: order,\n    className: \"right-dropdown icon-align\"\n  }, __jsx(Icon, {\n    name: moveUpSVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Move to top of folder\",\n    defaultMessage: \"Move to top of folder\"\n  })), __jsx(Menu.Item, {\n    onClick: onMoveToBottom,\n    value: order,\n    className: \"right-dropdown icon-align\"\n  }, __jsx(Icon, {\n    name: moveDownSVG,\n    color: \"#007eb1\",\n    size: \"24px\"\n  }), ' ', __jsx(FormattedMessage, {\n    id: \"Move to bottom of folder\",\n    defaultMessage: \"Move to bottom of folder\"\n  }))))))));\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\nconst DragDropConnector = props => {\n  const {\n    DropTarget,\n    DragSource\n  } = props.reactDnd;\n  const DndConnectedContentsItem = React.useMemo(() => DropTarget('item', {\n    hover(props, monitor) {\n      const id = monitor.getItem().id;\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderItem(id, dragOrder, hoverOrder - dragOrder, false);\n      monitor.getItem().order = hoverOrder;\n    },\n\n    drop(props, monitor) {\n      const id = monitor.getItem().id;\n      const dragOrder = monitor.getItem().startOrder;\n      const dropOrder = props.order;\n\n      if (dragOrder === dropOrder) {\n        return;\n      }\n\n      props.onOrderItem(id, dragOrder, dropOrder - dragOrder, true);\n      monitor.getItem().order = dropOrder;\n    }\n\n  }, connect => ({\n    connectDropTarget: connect.dropTarget()\n  }))(DragSource('item', {\n    beginDrag(props) {\n      return {\n        id: props.item['@id'],\n        order: props.order,\n        startOrder: props.order\n      };\n    }\n\n  }, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  }))(ContentsItemComponent)), [DragSource, DropTarget]);\n  return __jsx(DndConnectedContentsItem, props);\n};\n\nexport default injectLazyLibs('reactDnd')(DragDropConnector);","map":{"version":3,"names":["React","Button","Table","Menu","Divider","Link","useIntl","defineMessages","FormattedMessage","Circle","FormattedDate","Icon","Popup","getContentIcon","moreSVG","checkboxUncheckedSVG","checkboxCheckedSVG","cutSVG","deleteSVG","copySVG","showSVG","moveUpSVG","moveDownSVG","editingSVG","dragSVG","cx","injectLazyLibs","messages","private","published","intranet","draft","no_workflow_state","none","getColor","string","ContentsItemComponent","item","selected","onClick","indexes","onCut","onCopy","onDelete","onMoveToTop","onMoveToBottom","connectDragPreview","connectDragSource","connectDropTarget","isDragging","order","intl","display","e","is_folderish","title","ExpirationDate","Date","getTime","index","id","type","formatMessage","join","className","DragDropConnector","props","DropTarget","DragSource","reactDnd","DndConnectedContentsItem","useMemo","hover","monitor","getItem","dragOrder","hoverOrder","onOrderItem","drop","startOrder","dropOrder","connect","dropTarget","beginDrag","dragSource","dragPreview"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsItem.jsx"],"sourcesContent":["/**\n * Contents item component.\n * @module components/manage/Contents/ContentsItem\n */\n\nimport React from 'react';\nimport { Button, Table, Menu, Divider } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { Circle, FormattedDate, Icon, Popup } from '@plone/volto/components';\nimport { getContentIcon } from '@plone/volto/helpers';\nimport moreSVG from '@plone/volto/icons/more.svg';\nimport checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\nimport checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport moveUpSVG from '@plone/volto/icons/move-up.svg';\nimport moveDownSVG from '@plone/volto/icons/move-down.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport cx from 'classnames';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  private: {\n    id: 'private',\n    defaultMessage: 'Private',\n  },\n  published: {\n    id: 'published',\n    defaultMessage: 'Published',\n  },\n  intranet: {\n    id: 'intranet',\n    defaultMessage: 'Intranet',\n  },\n  draft: {\n    id: 'draft',\n    defaultMessage: 'Draft',\n  },\n  no_workflow_state: {\n    id: 'no workflow state',\n    defaultMessage: 'No workflow state',\n  },\n  none: {\n    id: 'None',\n    defaultMessage: 'None',\n  },\n});\n\nfunction getColor(string) {\n  switch (string) {\n    case 'private':\n      return '#ed4033';\n    case 'published':\n      return '#007bc1';\n    case 'intranet':\n      return '#51aa55';\n    case 'draft':\n      return '#f6a808';\n    default:\n      return 'grey';\n  }\n}\n\n/**\n * Contents item component class.\n * @function ContentsItemComponent\n * @returns {string} Markup of the component.\n */\nexport const ContentsItemComponent = ({\n  item,\n  selected,\n  onClick,\n  indexes,\n  onCut,\n  onCopy,\n  onDelete,\n  onMoveToTop,\n  onMoveToBottom,\n  connectDragPreview,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  order,\n}) => {\n  const intl = useIntl();\n\n  return connectDropTarget(\n    connectDragPreview(\n      <tr key={item['@id']} className={cx('', { 'dragging-row': isDragging })}>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          {connectDragSource(\n            <div style={{ display: 'inline-block' }}>\n              <Button icon basic>\n                <Icon\n                  name={dragSVG}\n                  size=\"20px\"\n                  color=\"#878f93\"\n                  className=\"content drag handle\"\n                />\n              </Button>\n            </div>,\n          )}\n        </Table.Cell>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          {selected ? (\n            <Button\n              icon\n              basic\n              aria-label=\"Unchecked\"\n              onClick={(e) => onClick(e, item['@id'])}\n            >\n              <Icon\n                name={checkboxCheckedSVG}\n                color=\"#007eb1\"\n                size=\"24px\"\n                className=\"checked\"\n              />\n            </Button>\n          ) : (\n            <Button\n              icon\n              basic\n              aria-label=\"Checked\"\n              onClick={(e) => onClick(e, item['@id'])}\n            >\n              <Icon\n                name={checkboxUncheckedSVG}\n                color=\"#826a6a\"\n                size=\"24px\"\n                className=\"unchecked\"\n              />\n            </Button>\n          )}\n        </Table.Cell>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          <Link\n            className=\"icon-align-name\"\n            to={`${item['@id']}${item.is_folderish ? '/contents' : ''}`}\n          >\n            <div className=\"expire-align\">\n              <Icon\n                name={getContentIcon(item['@type'], item.is_folderish)}\n                size=\"20px\"\n                className=\"icon-margin\"\n                color=\"#878f93\"\n                title={item['Type'] || item['@type']}\n              />{' '}\n              <span title={item.title}> {item.title}</span>\n            </div>\n            {item.ExpirationDate !== 'None' &&\n              new Date(item.ExpirationDate).getTime() <\n                new Date().getTime() && (\n                <Button className=\"button-margin\" size=\"mini\">\n                  <FormattedMessage id=\"Expired\" defaultMessage=\"Expired\" />\n                </Button>\n              )}\n          </Link>\n        </Table.Cell>\n        {map(indexes, (index) => (\n          <Table.Cell\n            className={cx('', { 'dragging-cell': isDragging })}\n            key={index.id}\n          >\n            {index.type === 'boolean' &&\n              (item[index.id] ? (\n                <FormattedMessage id=\"Yes\" defaultMessage=\"Yes\" />\n              ) : (\n                <FormattedMessage id=\"No\" defaultMessage=\"No\" />\n              ))}\n            {index.type === 'string' &&\n              index.id !== 'review_state' &&\n              item[index.id]}\n            {index.id === 'review_state' && (\n              <div>\n                <span>\n                  <Circle color={getColor(item[index.id])} size=\"15px\" />\n                </span>\n                {messages[item[index.id]]\n                  ? intl.formatMessage(messages[item[index.id]])\n                  : item['review_title'] ||\n                    item['review_state'] ||\n                    intl.formatMessage(messages.no_workflow_state)}\n              </div>\n            )}\n            {index.type === 'date' && (\n              <>\n                {item[index?.id] && item[index.id] !== 'None' ? (\n                  <FormattedDate date={item[index.id]} />\n                ) : (\n                  intl.formatMessage(messages.none)\n                )}\n              </>\n            )}\n            {index.type === 'array' && (\n              <span>{item[index.id]?.join(', ')}</span>\n            )}\n          </Table.Cell>\n        ))}\n        <Table.Cell\n          className={cx('', { 'dragging-cell': isDragging })}\n          textAlign=\"right\"\n        >\n          <Popup\n            menu={true}\n            position=\"bottom right\"\n            flowing={true}\n            basic={true}\n            on=\"click\"\n            popper={{\n              className: 'dropdown-popup',\n            }}\n            trigger={\n              <Icon\n                name={moreSVG}\n                className=\"dropdown-popup-trigger\"\n                size=\"24px\"\n                color=\"#007eb1\"\n              />\n            }\n          >\n            <Menu vertical borderless fluid>\n              <Link className=\"item icon-align\" to={`${item['@id']}/edit`}>\n                <Icon name={editingSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n              </Link>\n              <Link className=\"item right-dropdown icon-align\" to={item['@id']}>\n                <Icon name={showSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"View\" defaultMessage=\"View\" />\n              </Link>\n              <Divider />\n              <Menu.Item\n                onClick={onCut}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={cutSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Cut\" defaultMessage=\"Cut\" />\n              </Menu.Item>\n              <Menu.Item\n                onClick={onCopy}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={copySVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Copy\" defaultMessage=\"Copy\" />\n              </Menu.Item>\n              <Menu.Item\n                onClick={onDelete}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={deleteSVG} color=\"#e40166\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n              </Menu.Item>\n              <Divider />\n              <Menu.Item\n                onClick={onMoveToTop}\n                value={order}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={moveUpSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage\n                  id=\"Move to top of folder\"\n                  defaultMessage=\"Move to top of folder\"\n                />\n              </Menu.Item>\n              <Menu.Item\n                onClick={onMoveToBottom}\n                value={order}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={moveDownSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage\n                  id=\"Move to bottom of folder\"\n                  defaultMessage=\"Move to bottom of folder\"\n                />\n              </Menu.Item>\n            </Menu>\n          </Popup>\n        </Table.Cell>\n      </tr>,\n    ),\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nContentsItemComponent.propTypes = {\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    title: PropTypes.string,\n    is_folderish: PropTypes.bool,\n    '@type': PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  indexes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      type: PropTypes.string,\n    }),\n  ).isRequired,\n  onCut: PropTypes.func.isRequired,\n  onCopy: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onMoveToTop: PropTypes.func.isRequired,\n  onMoveToBottom: PropTypes.func.isRequired,\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  onOrderItem: PropTypes.func.isRequired,\n};\n\nconst DragDropConnector = (props) => {\n  const { DropTarget, DragSource } = props.reactDnd;\n\n  const DndConnectedContentsItem = React.useMemo(\n    () =>\n      DropTarget(\n        'item',\n        {\n          hover(props, monitor) {\n            const id = monitor.getItem().id;\n            const dragOrder = monitor.getItem().order;\n            const hoverOrder = props.order;\n\n            if (dragOrder === hoverOrder) {\n              return;\n            }\n\n            props.onOrderItem(id, dragOrder, hoverOrder - dragOrder, false);\n\n            monitor.getItem().order = hoverOrder;\n          },\n          drop(props, monitor) {\n            const id = monitor.getItem().id;\n            const dragOrder = monitor.getItem().startOrder;\n            const dropOrder = props.order;\n\n            if (dragOrder === dropOrder) {\n              return;\n            }\n\n            props.onOrderItem(id, dragOrder, dropOrder - dragOrder, true);\n\n            monitor.getItem().order = dropOrder;\n          },\n        },\n        (connect) => ({\n          connectDropTarget: connect.dropTarget(),\n        }),\n      )(\n        DragSource(\n          'item',\n          {\n            beginDrag(props) {\n              return {\n                id: props.item['@id'],\n                order: props.order,\n                startOrder: props.order,\n              };\n            },\n          },\n          (connect, monitor) => ({\n            connectDragSource: connect.dragSource(),\n            connectDragPreview: connect.dragPreview(),\n            isDragging: monitor.isDragging(),\n          }),\n        )(ContentsItemComponent),\n      ),\n    [DragSource, DropTarget],\n  );\n\n  return <DndConnectedContentsItem {...props} />;\n};\n\nexport default injectLazyLibs('reactDnd')(DragDropConnector);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"private","defaultMessage":"Private"},{"id":"published","defaultMessage":"Published"},{"id":"intranet","defaultMessage":"Intranet"},{"id":"draft","defaultMessage":"Draft"},{"id":"no workflow state","defaultMessage":"No workflow state"},{"id":"None","defaultMessage":"None"},{"id":"Expired","defaultMessage":"Expired"},{"id":"Yes","defaultMessage":"Yes"},{"id":"No","defaultMessage":"No"},{"id":"Edit","defaultMessage":"Edit"},{"id":"View","defaultMessage":"View"},{"id":"Cut","defaultMessage":"Cut"},{"id":"Copy","defaultMessage":"Copy"},{"id":"Delete","defaultMessage":"Delete"},{"id":"Move to top of folder","defaultMessage":"Move to top of folder"},{"id":"Move to bottom of folder","defaultMessage":"Move to bottom of folder"}]}},"sourceType":"module"}