{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { getContent } from '@plone/volto/actions';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { TeaserSchema } from './schema';\n\nconst TeaserData = props => {\n  var _data$href;\n\n  const {\n    block,\n    blocksConfig,\n    data,\n    onChangeBlock\n  } = props;\n  const intl = useIntl();\n  const href = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : _data$href[0];\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    if (!_isEmpty(href) && !data.title && !data.description) {\n      dispatch(getContent(href['@id'], null, block)).then(resp => {\n        onChangeBlock(block, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, data), !data.title && {\n          title: resp.title\n        }), !data.description && {\n          description: resp.description\n        }), !data.head_title && {\n          head_title: resp.head_title\n        }));\n      });\n    } // This condition is required in order to not reset the fields on mount (block creation),\n    // when the href is undefined yet. It makes the block defaults play well with this block.\n\n\n    if (href === undefined && data.href !== undefined) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        title: '',\n        description: '',\n        head_title: ''\n      }));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [href]);\n  const schema = TeaserSchema(_objectSpread(_objectSpread({}, props), {}, {\n    intl\n  }));\n  return __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    blocksConfig: blocksConfig\n  });\n};\n\nexport default TeaserData;","map":{"version":3,"names":["React","useIntl","useDispatch","getContent","BlockDataForm","TeaserSchema","TeaserData","props","block","blocksConfig","data","onChangeBlock","intl","href","dispatch","useEffect","title","description","then","resp","head_title","undefined","schema","id","value"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Teaser/Data.jsx"],"sourcesContent":["import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { getContent } from '@plone/volto/actions';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { TeaserSchema } from './schema';\nimport { isEmpty } from 'lodash';\n\nconst TeaserData = (props) => {\n  const { block, blocksConfig, data, onChangeBlock } = props;\n  const intl = useIntl();\n\n  const href = data.href?.[0];\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (!isEmpty(href) && !data.title && !data.description) {\n      dispatch(getContent(href['@id'], null, block)).then((resp) => {\n        onChangeBlock(block, {\n          ...data,\n          ...(!data.title && { title: resp.title }),\n          ...(!data.description && { description: resp.description }),\n          ...(!data.head_title && { head_title: resp.head_title }),\n        });\n      });\n    }\n    // This condition is required in order to not reset the fields on mount (block creation),\n    // when the href is undefined yet. It makes the block defaults play well with this block.\n    if (href === undefined && data.href !== undefined) {\n      onChangeBlock(block, {\n        ...data,\n        title: '',\n        description: '',\n        head_title: '',\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [href]);\n\n  const schema = TeaserSchema({ ...props, intl });\n\n  return (\n    <BlockDataForm\n      schema={schema}\n      title={schema.title}\n      onChangeField={(id, value) => {\n        onChangeBlock(block, {\n          ...data,\n          [id]: value,\n        });\n      }}\n      formData={data}\n      block={block}\n      blocksConfig={blocksConfig}\n    />\n  );\n};\n\nexport default TeaserData;\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,YAAT,QAA6B,UAA7B;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAW;EAAA;;EAC5B,MAAM;IAAEC,KAAF;IAASC,YAAT;IAAuBC,IAAvB;IAA6BC;EAA7B,IAA+CJ,KAArD;EACA,MAAMK,IAAI,GAAGX,OAAO,EAApB;EAEA,MAAMY,IAAI,iBAAGH,IAAI,CAACG,IAAR,+CAAG,WAAY,CAAZ,CAAb;EACA,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;EAEAF,KAAK,CAACe,SAAN,CAAgB,MAAM;IACpB,IAAI,CAAC,SAAQF,IAAR,CAAD,IAAkB,CAACH,IAAI,CAACM,KAAxB,IAAiC,CAACN,IAAI,CAACO,WAA3C,EAAwD;MACtDH,QAAQ,CAACX,UAAU,CAACU,IAAI,CAAC,KAAD,CAAL,EAAc,IAAd,EAAoBL,KAApB,CAAX,CAAR,CAA+CU,IAA/C,CAAqDC,IAAD,IAAU;QAC5DR,aAAa,CAACH,KAAD,8DACRE,IADQ,GAEP,CAACA,IAAI,CAACM,KAAN,IAAe;UAAEA,KAAK,EAAEG,IAAI,CAACH;QAAd,CAFR,GAGP,CAACN,IAAI,CAACO,WAAN,IAAqB;UAAEA,WAAW,EAAEE,IAAI,CAACF;QAApB,CAHd,GAIP,CAACP,IAAI,CAACU,UAAN,IAAoB;UAAEA,UAAU,EAAED,IAAI,CAACC;QAAnB,CAJb,EAAb;MAMD,CAPD;IAQD,CAVmB,CAWpB;IACA;;;IACA,IAAIP,IAAI,KAAKQ,SAAT,IAAsBX,IAAI,CAACG,IAAL,KAAcQ,SAAxC,EAAmD;MACjDV,aAAa,CAACH,KAAD,kCACRE,IADQ;QAEXM,KAAK,EAAE,EAFI;QAGXC,WAAW,EAAE,EAHF;QAIXG,UAAU,EAAE;MAJD,GAAb;IAMD,CApBmB,CAqBpB;;EACD,CAtBD,EAsBG,CAACP,IAAD,CAtBH;EAwBA,MAAMS,MAAM,GAAGjB,YAAY,iCAAME,KAAN;IAAaK;EAAb,GAA3B;EAEA,OACE,MAAC,aAAD;IACE,MAAM,EAAEU,MADV;IAEE,KAAK,EAAEA,MAAM,CAACN,KAFhB;IAGE,aAAa,EAAE,CAACO,EAAD,EAAKC,KAAL,KAAe;MAC5Bb,aAAa,CAACH,KAAD,kCACRE,IADQ;QAEX,CAACa,EAAD,GAAMC;MAFK,GAAb;IAID,CARH;IASE,QAAQ,EAAEd,IATZ;IAUE,KAAK,EAAEF,KAVT;IAWE,YAAY,EAAEC;EAXhB,EADF;AAeD,CAhDD;;AAkDA,eAAeH,UAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}