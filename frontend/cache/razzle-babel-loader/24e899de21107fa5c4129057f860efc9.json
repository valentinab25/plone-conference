{"ast":null,"code":"import _map from \"lodash/map\";\nimport _findIndex from \"lodash/findIndex\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Schema helper.\n * @module helpers/schema/schema\n */\nimport merge from 'deepmerge';\n\n/**\n * Merge schemas\n * @method mergeSchemas\n * @param {Array} schemas Array of schemas\n * @returns {Object} Merged schemas.\n */\nexport function mergeSchemas(...schemas) {\n  const schema = merge.all(schemas);\n  let fieldsets = [];\n\n  _map(schema.fieldsets, fieldset => {\n    // Find fieldset\n    const index = _findIndex(fieldsets, entry => entry.id === fieldset.id); // Check if already exists\n\n\n    if (index !== -1) {\n      // Append fields\n      fieldsets[index].fields = [...fieldsets[index].fields, ...fieldset.fields];\n    } else {\n      // Add new fieldset\n      fieldsets.push(fieldset);\n    }\n  });\n\n  return _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets\n  });\n}","map":{"version":3,"names":["merge","mergeSchemas","schemas","schema","all","fieldsets","fieldset","index","entry","id","fields","push"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/helpers/Schema/Schema.js"],"sourcesContent":["/**\n * Schema helper.\n * @module helpers/schema/schema\n */\n\nimport merge from 'deepmerge';\nimport { findIndex, map } from 'lodash';\n\n/**\n * Merge schemas\n * @method mergeSchemas\n * @param {Array} schemas Array of schemas\n * @returns {Object} Merged schemas.\n */\nexport function mergeSchemas(...schemas) {\n  const schema = merge.all(schemas);\n  let fieldsets = [];\n  map(schema.fieldsets, (fieldset) => {\n    // Find fieldset\n    const index = findIndex(fieldsets, (entry) => entry.id === fieldset.id);\n\n    // Check if already exists\n    if (index !== -1) {\n      // Append fields\n      fieldsets[index].fields = [\n        ...fieldsets[index].fields,\n        ...fieldset.fields,\n      ];\n    } else {\n      // Add new fieldset\n      fieldsets.push(fieldset);\n    }\n  });\n\n  return {\n    ...schema,\n    fieldsets,\n  };\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,WAAlB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAT,CAAsB,GAAGC,OAAzB,EAAkC;EACvC,MAAMC,MAAM,GAAGH,KAAK,CAACI,GAAN,CAAUF,OAAV,CAAf;EACA,IAAIG,SAAS,GAAG,EAAhB;;EACA,KAAIF,MAAM,CAACE,SAAX,EAAuBC,QAAD,IAAc;IAClC;IACA,MAAMC,KAAK,GAAG,WAAUF,SAAV,EAAsBG,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,QAAQ,CAACG,EAAtD,CAAd,CAFkC,CAIlC;;;IACA,IAAIF,KAAK,KAAK,CAAC,CAAf,EAAkB;MAChB;MACAF,SAAS,CAACE,KAAD,CAAT,CAAiBG,MAAjB,GAA0B,CACxB,GAAGL,SAAS,CAACE,KAAD,CAAT,CAAiBG,MADI,EAExB,GAAGJ,QAAQ,CAACI,MAFY,CAA1B;IAID,CAND,MAMO;MACL;MACAL,SAAS,CAACM,IAAV,CAAeL,QAAf;IACD;EACF,CAfD;;EAiBA,uCACKH,MADL;IAEEE;EAFF;AAID"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}