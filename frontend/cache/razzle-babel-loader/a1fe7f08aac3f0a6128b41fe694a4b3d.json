{"ast":null,"code":"var __jsx = React.createElement;\n\n/**\n * LoginAuthomatic container.\n * @module components/LoginAuthomatic/LoginAuthomatic\n */\nimport React, { useEffect } from 'react';\nimport { authomaticLogin } from '../../actions';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { useParams, useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nconst messages = defineMessages({\n  oAuthLoginFailed: {\n    \"id\": \"Login Failed\",\n    \"defaultMessage\": \"Login Failed\"\n  },\n  oAuthLoginFailedContent: {\n    \"id\": \"Authentication failed.\",\n    \"defaultMessage\": \"Authentication failed.\"\n  },\n  authenticating: {\n    \"id\": \"Authenticating\",\n    \"defaultMessage\": \"Authenticating\"\n  }\n});\n/**\n * LoginAuthomatic function.\n * @function LoginAuthomatic\n * @returns {JSX.Element} Markup of the LoginAuthomatic page.\n */\n\nfunction LoginAuthomatic(_ref) {\n  let {\n    intl\n  } = _ref;\n  const query = useLocation().search;\n  const {\n    provider\n  } = useParams();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const session = useSelector(state => state.authomaticRedirect.session);\n  const userSession = useSelector(state => state.userSession);\n  const isLoading = userSession.login.loading;\n  const error = userSession.login.error;\n  const token = userSession.token;\n  useEffect(() => {\n    dispatch(authomaticLogin(provider, query, session));\n  }, [dispatch, provider, query, session]);\n  useEffect(() => {\n    if (token) {\n      history.push('/');\n\n      if (toast.isActive('loginFailed')) {\n        toast.dismiss('loginFailed');\n      }\n    }\n  }, [token, history]);\n  useEffect(() => {\n    if (error) {\n      history.push('/login');\n\n      if (!toast.isActive('loginFailed')) {\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: intl.formatMessage(messages.oAuthLoginFailed),\n          content: intl.formatMessage(messages.oAuthLoginFailedContent)\n        }), {\n          autoClose: false,\n          toastId: 'loginFailed'\n        });\n      }\n    }\n  }, [error, history, intl]);\n  return __jsx(\"div\", {\n    id: \"page-login\"\n  }, __jsx(Container, {\n    text: true\n  }, __jsx(Dimmer, {\n    active: isLoading\n  }, __jsx(Loader, {\n    size: 'huge'\n  }, intl.formatMessage(messages.authenticating)))));\n}\n\nexport default injectIntl(LoginAuthomatic);","map":{"version":3,"names":["React","useEffect","authomaticLogin","Container","Dimmer","Loader","toast","Toast","defineMessages","injectIntl","useParams","useLocation","useHistory","useSelector","useDispatch","messages","oAuthLoginFailed","oAuthLoginFailedContent","authenticating","LoginAuthomatic","intl","query","search","provider","history","dispatch","session","state","authomaticRedirect","userSession","isLoading","login","loading","error","token","push","isActive","dismiss","formatMessage","autoClose","toastId"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone-collective/volto-authomatic/src/components/LoginAuthomatic/LoginAuthomatic.jsx"],"sourcesContent":["/**\n * LoginAuthomatic container.\n * @module components/LoginAuthomatic/LoginAuthomatic\n */\nimport React, { useEffect } from 'react';\nimport { authomaticLogin } from '../../actions';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { useParams, useLocation, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst messages = defineMessages({\n  oAuthLoginFailed: {\n    id: 'Login Failed',\n    defaultMessage: 'Login Failed',\n  },\n  oAuthLoginFailedContent: {\n    id: 'Authentication failed.',\n    defaultMessage: 'Authentication failed.',\n  },\n  authenticating: {\n    id: 'Authenticating',\n    defaultMessage: 'Authenticating',\n  },\n});\n\n/**\n * LoginAuthomatic function.\n * @function LoginAuthomatic\n * @returns {JSX.Element} Markup of the LoginAuthomatic page.\n */\nfunction LoginAuthomatic({ intl }) {\n  const query = useLocation().search;\n  const { provider } = useParams();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const session = useSelector((state) => state.authomaticRedirect.session);\n  const userSession = useSelector((state) => state.userSession);\n  const isLoading = userSession.login.loading;\n  const error = userSession.login.error;\n  const token = userSession.token;\n\n  useEffect(() => {\n    dispatch(authomaticLogin(provider, query, session));\n  }, [dispatch, provider, query, session]);\n\n  useEffect(() => {\n    if (token) {\n      history.push('/');\n      if (toast.isActive('loginFailed')) {\n        toast.dismiss('loginFailed');\n      }\n    }\n  }, [token, history]);\n\n  useEffect(() => {\n    if (error) {\n      history.push('/login');\n      if (!toast.isActive('loginFailed')) {\n        toast.error(\n          <Toast\n            error\n            title={intl.formatMessage(messages.oAuthLoginFailed)}\n            content={intl.formatMessage(messages.oAuthLoginFailedContent)}\n          />,\n          { autoClose: false, toastId: 'loginFailed' },\n        );\n      }\n    }\n  }, [error, history, intl]);\n\n  return (\n    <div id=\"page-login\">\n      <Container text>\n        <Dimmer active={isLoading}>\n          <Loader size={'huge'}>\n            {intl.formatMessage(messages.authenticating)}\n          </Loader>\n        </Dimmer>\n      </Container>\n    </div>\n  );\n}\n\nexport default injectIntl(LoginAuthomatic);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Login Failed","defaultMessage":"Login Failed"},{"id":"Authentication failed.","defaultMessage":"Authentication failed."},{"id":"Authenticating","defaultMessage":"Authenticating"}]}},"sourceType":"module"}