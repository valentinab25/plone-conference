{"ast":null,"code":"import _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nimport _isEqual from \"lodash/isEqual\";\nimport _find from \"lodash/find\";\nvar __jsx = React.createElement;\n\n/**\n * Sharing container.\n * @module components/manage/Sharing/Sharing\n */\nimport React, { Component } from 'react';\nimport { Plug, Pluggable } from '@plone/volto/components/manage/Pluggable';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Checkbox, Container, Form, Icon as IconOld, Input, Segment, Table } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { updateSharing, getSharing } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { toast } from 'react-toastify';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  searchForUserOrGroup: {\n    \"id\": \"Search for user or group\",\n    \"defaultMessage\": \"Search for user or group\"\n  },\n  inherit: {\n    \"id\": \"Inherit permissions from higher levels\",\n    \"defaultMessage\": \"Inherit permissions from higher levels\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  sharing: {\n    \"id\": \"Sharing\",\n    \"defaultMessage\": \"Sharing\"\n  },\n  user: {\n    \"id\": \"User\",\n    \"defaultMessage\": \"User\"\n  },\n  group: {\n    \"id\": \"Group\",\n    \"defaultMessage\": \"Group\"\n  },\n  globalRole: {\n    \"id\": \"Global role\",\n    \"defaultMessage\": \"Global role\"\n  },\n  inheritedValue: {\n    \"id\": \"Inherited value\",\n    \"defaultMessage\": \"Inherited value\"\n  },\n  permissionsUpdated: {\n    \"id\": \"Permissions updated\",\n    \"defaultMessage\": \"Permissions updated\"\n  },\n  permissionsUpdatedSuccessfully: {\n    \"id\": \"Permissions have been updated successfully\",\n    \"defaultMessage\": \"Permissions have been updated successfully\"\n  }\n});\n/**\n * SharingComponent class.\n * @class SharingComponent\n * @extends Component\n */\n\nclass SharingComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleInherit = this.onToggleInherit.bind(this);\n    this.state = {\n      search: '',\n      inherit: props.inherit,\n      entries: props.entries,\n      isClient: false\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n    this.setState({\n      isClient: true\n    });\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.permissionsUpdated),\n        content: this.props.intl.formatMessage(messages.permissionsUpdatedSuccessfully)\n      }));\n    }\n\n    this.setState({\n      inherit: this.props.inherit === null ? nextProps.inherit : this.state.inherit,\n      entries: _map(nextProps.entries, entry => {\n        const values = _find(this.state.entries, {\n          id: entry.id\n        });\n\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          roles: values ? values.roles : entry.roles\n        });\n      })\n    });\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(event) {\n    const data = {\n      entries: []\n    };\n    event.preventDefault();\n\n    if (this.props.inherit !== this.state.inherit) {\n      data.inherit = this.state.inherit;\n    }\n\n    for (let i = 0; i < this.props.entries.length; i += 1) {\n      if (!_isEqual(this.props.entries[i].roles, this.state.entries[i].roles)) {\n        data.entries.push({\n          id: this.state.entries[i].id,\n          type: this.state.entries[i].type,\n          roles: this.state.entries[i].roles\n        });\n      }\n    }\n\n    this.props.updateSharing(getBaseUrl(this.props.pathname), data);\n  }\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onSearch(event) {\n    event.preventDefault();\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n  }\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n  /**\n   * On toggle inherit handler\n   * @method onToggleInherit\n   * @returns {undefined}\n   */\n\n\n  onToggleInherit() {\n    this.setState({\n      inherit: !this.state.inherit\n    });\n  }\n  /**\n   * On change handler\n   * @method onChange\n   * @param {object} event Event object\n   * @param {string} value Entry value\n   * @returns {undefined}\n   */\n\n\n  onChange(event, _ref) {\n    let {\n      value\n    } = _ref;\n    const [principal, role] = value.split(':');\n    this.setState({\n      entries: _map(this.state.entries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === principal ? _objectSpread(_objectSpread({}, entry.roles), {}, {\n          [role]: !entry.roles[role]\n        }) : entry.roles\n      }))\n    });\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$available, _this$state$entries;\n\n    return __jsx(Container, {\n      id: \"page-sharing\"\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.sharing)\n    }), __jsx(Segment.Group, {\n      raised: true\n    }, __jsx(Pluggable, {\n      name: \"sharing-component\"\n    }), __jsx(Plug, {\n      pluggable: \"sharing-component\",\n      id: \"sharing-component-title\"\n    }, __jsx(Segment, {\n      className: \"primary\"\n    }, __jsx(FormattedMessage, {\n      id: \"Sharing for {title}\",\n      defaultMessage: \"Sharing for {title}\",\n      values: {\n        title: __jsx(\"q\", null, this.props.title)\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"sharing-component\",\n      id: \"sharing-component-description\"\n    }, __jsx(Segment, {\n      secondary: true\n    }, __jsx(FormattedMessage, {\n      id: \"You can control who can view and edit your item using the list below.\",\n      defaultMessage: \"You can control who can view and edit your item using the list below.\"\n    }))), __jsx(Plug, {\n      pluggable: \"sharing-component\",\n      id: \"sharing-component-search\"\n    }, __jsx(Segment, null, __jsx(Form, {\n      onSubmit: this.onSearch\n    }, __jsx(Form.Field, null, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search'\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchForUserOrGroup),\n      onChange: this.onChangeSearch\n    }))))), __jsx(Plug, {\n      pluggable: \"sharing-component\",\n      id: \"sharing-component-form\",\n      dependencies: [this.state.entries, this.props.available_roles]\n    }, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Table, {\n      celled: true,\n      padded: true,\n      striped: true,\n      attached: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, __jsx(FormattedMessage, {\n      id: \"Name\",\n      defaultMessage: \"Name\"\n    })), (_this$props$available = this.props.available_roles) === null || _this$props$available === void 0 ? void 0 : _this$props$available.map(role => __jsx(Table.HeaderCell, {\n      key: role.id\n    }, role.title)))), __jsx(Table.Body, null, (_this$state$entries = this.state.entries) === null || _this$state$entries === void 0 ? void 0 : _this$state$entries.map(entry => {\n      var _this$props$available2;\n\n      return __jsx(Table.Row, {\n        key: entry.id\n      }, __jsx(Table.Cell, null, __jsx(IconOld, {\n        name: entry.type === 'user' ? 'user' : 'users',\n        title: entry.type === 'user' ? this.props.intl.formatMessage(messages.user) : this.props.intl.formatMessage(messages.group)\n      }), ' ', entry.title, entry.login && ` (${entry.login})`), (_this$props$available2 = this.props.available_roles) === null || _this$props$available2 === void 0 ? void 0 : _this$props$available2.map(role => __jsx(Table.Cell, {\n        key: role.id\n      }, entry.roles[role.id] === 'global' && __jsx(IconOld, {\n        name: \"check circle outline\",\n        title: this.props.intl.formatMessage(messages.globalRole),\n        color: \"blue\"\n      }), entry.roles[role.id] === 'acquired' && __jsx(IconOld, {\n        name: \"check circle outline\",\n        color: \"green\",\n        title: this.props.intl.formatMessage(messages.inheritedValue)\n      }), typeof entry.roles[role.id] === 'boolean' && __jsx(Checkbox, {\n        onChange: this.onChange,\n        value: `${entry.id}:${role.id}`,\n        checked: entry.roles[role.id],\n        disabled: entry.login === this.props.login\n      }))));\n    }))), __jsx(Segment, {\n      attached: true\n    }, __jsx(Form.Field, null, __jsx(Checkbox, {\n      checked: this.state.inherit,\n      onChange: this.onToggleInherit,\n      label: this.props.intl.formatMessage(messages.inherit)\n    })), __jsx(\"p\", {\n      className: \"help\"\n    }, __jsx(FormattedMessage, {\n      id: \"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\",\n      defaultMessage: \"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\",\n      values: {\n        inherited: __jsx(IconOld, {\n          name: \"check circle outline\",\n          color: \"green\"\n        }),\n        global: __jsx(IconOld, {\n          name: \"check circle outline\",\n          color: \"blue\"\n        })\n      }\n    }))), __jsx(Segment, {\n      className: \"actions\",\n      attached: true,\n      clearing: true\n    }, __jsx(Button, {\n      basic: true,\n      primary: true,\n      floated: \"right\",\n      type: \"submit\",\n      \"aria-label\": this.props.intl.formatMessage(messages.save),\n      title: this.props.intl.formatMessage(messages.save),\n      loading: this.props.updateRequest.loading,\n      onClick: this.onSubmit\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: aheadSVG,\n      size: \"30px\"\n    })), __jsx(Button, {\n      basic: true,\n      secondary: true,\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      onClick: this.onCancel\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: clearSVG,\n      size: \"30px\"\n    })))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar')\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\"\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back)\n      }))\n    })));\n  }\n\n}\n\n_defineProperty(SharingComponent, \"defaultProps\", {\n  inherit: null,\n  login: ''\n});\n\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  entries: state.sharing.data.entries,\n  inherit: state.sharing.data.inherit,\n  available_roles: state.sharing.data.available_roles,\n  updateRequest: state.sharing.update,\n  pathname: props.location.pathname,\n  title: state.content.data.title,\n  login: state.userSession.token ? jwtDecode(state.userSession.token).sub : ''\n}), {\n  updateSharing,\n  getSharing\n}))(SharingComponent);","map":{"version":3,"names":["React","Component","Plug","Pluggable","Helmet","connect","compose","Link","withRouter","Portal","Button","Checkbox","Container","Form","Icon","IconOld","Input","Segment","Table","jwtDecode","FormattedMessage","defineMessages","injectIntl","updateSharing","getSharing","getBaseUrl","Toolbar","Toast","toast","aheadSVG","clearSVG","backSVG","messages","searchForUserOrGroup","inherit","save","cancel","back","sharing","user","group","globalRole","inheritedValue","permissionsUpdated","permissionsUpdatedSuccessfully","SharingComponent","constructor","props","onCancel","bind","onChange","onChangeSearch","onSearch","onSubmit","onToggleInherit","state","search","entries","isClient","componentDidMount","pathname","setState","UNSAFE_componentWillReceiveProps","nextProps","updateRequest","loading","loaded","success","intl","formatMessage","entry","values","id","roles","event","data","preventDefault","i","length","push","type","target","value","principal","role","split","history","render","title","icon","available_roles","map","login","inherited","global","document","getElementById","update","location","content","userSession","token","sub"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Sharing/Sharing.jsx"],"sourcesContent":["/**\n * Sharing container.\n * @module components/manage/Sharing/Sharing\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Plug, Pluggable } from '@plone/volto/components/manage/Pluggable';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { find, isEqual, map } from 'lodash';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Icon as IconOld,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { updateSharing, getSharing } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { toast } from 'react-toastify';\n\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  searchForUserOrGroup: {\n    id: 'Search for user or group',\n    defaultMessage: 'Search for user or group',\n  },\n  inherit: {\n    id: 'Inherit permissions from higher levels',\n    defaultMessage: 'Inherit permissions from higher levels',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  sharing: {\n    id: 'Sharing',\n    defaultMessage: 'Sharing',\n  },\n  user: {\n    id: 'User',\n    defaultMessage: 'User',\n  },\n  group: {\n    id: 'Group',\n    defaultMessage: 'Group',\n  },\n  globalRole: {\n    id: 'Global role',\n    defaultMessage: 'Global role',\n  },\n  inheritedValue: {\n    id: 'Inherited value',\n    defaultMessage: 'Inherited value',\n  },\n  permissionsUpdated: {\n    id: 'Permissions updated',\n    defaultMessage: 'Permissions updated',\n  },\n  permissionsUpdatedSuccessfully: {\n    id: 'Permissions have been updated successfully',\n    defaultMessage: 'Permissions have been updated successfully',\n  },\n});\n\n/**\n * SharingComponent class.\n * @class SharingComponent\n * @extends Component\n */\nclass SharingComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateSharing: PropTypes.func.isRequired,\n    getSharing: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    entries: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        login: PropTypes.string,\n        roles: PropTypes.object,\n        title: PropTypes.string,\n        type: PropTypes.string,\n      }),\n    ).isRequired,\n    available_roles: PropTypes.arrayOf(PropTypes.object).isRequired,\n    inherit: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    login: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    inherit: null,\n    login: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleInherit = this.onToggleInherit.bind(this);\n    this.state = {\n      search: '',\n      inherit: props.inherit,\n      entries: props.entries,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.permissionsUpdated)}\n          content={this.props.intl.formatMessage(\n            messages.permissionsUpdatedSuccessfully,\n          )}\n        />,\n      );\n    }\n    this.setState({\n      inherit:\n        this.props.inherit === null ? nextProps.inherit : this.state.inherit,\n      entries: map(nextProps.entries, (entry) => {\n        const values = find(this.state.entries, { id: entry.id });\n        return {\n          ...entry,\n          roles: values ? values.roles : entry.roles,\n        };\n      }),\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const data = { entries: [] };\n    event.preventDefault();\n    if (this.props.inherit !== this.state.inherit) {\n      data.inherit = this.state.inherit;\n    }\n    for (let i = 0; i < this.props.entries.length; i += 1) {\n      if (!isEqual(this.props.entries[i].roles, this.state.entries[i].roles)) {\n        data.entries.push({\n          id: this.state.entries[i].id,\n          type: this.state.entries[i].type,\n          roles: this.state.entries[i].roles,\n        });\n      }\n    }\n    this.props.updateSharing(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * On toggle inherit handler\n   * @method onToggleInherit\n   * @returns {undefined}\n   */\n  onToggleInherit() {\n    this.setState({\n      inherit: !this.state.inherit,\n    });\n  }\n\n  /**\n   * On change handler\n   * @method onChange\n   * @param {object} event Event object\n   * @param {string} value Entry value\n   * @returns {undefined}\n   */\n  onChange(event, { value }) {\n    const [principal, role] = value.split(':');\n    this.setState({\n      entries: map(this.state.entries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === principal\n            ? {\n                ...entry.roles,\n                [role]: !entry.roles[role],\n              }\n            : entry.roles,\n      })),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-sharing\">\n        <Helmet title={this.props.intl.formatMessage(messages.sharing)} />\n        <Segment.Group raised>\n          <Pluggable name=\"sharing-component\" />\n          <Plug pluggable=\"sharing-component\" id=\"sharing-component-title\">\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Sharing for {title}\"\n                defaultMessage=\"Sharing for {title}\"\n                values={{ title: <q>{this.props.title}</q> }}\n              />\n            </Segment>\n          </Plug>\n          <Plug\n            pluggable=\"sharing-component\"\n            id=\"sharing-component-description\"\n          >\n            <Segment secondary>\n              <FormattedMessage\n                id=\"You can control who can view and edit your item using the list below.\"\n                defaultMessage=\"You can control who can view and edit your item using the list below.\"\n              />\n            </Segment>\n          </Plug>\n          <Plug pluggable=\"sharing-component\" id=\"sharing-component-search\">\n            <Segment>\n              <Form onSubmit={this.onSearch}>\n                <Form.Field>\n                  <Input\n                    name=\"SearchableText\"\n                    action={{ icon: 'search' }}\n                    placeholder={this.props.intl.formatMessage(\n                      messages.searchForUserOrGroup,\n                    )}\n                    onChange={this.onChangeSearch}\n                  />\n                </Form.Field>\n              </Form>\n            </Segment>\n          </Plug>\n          <Plug\n            pluggable=\"sharing-component\"\n            id=\"sharing-component-form\"\n            dependencies={[this.state.entries, this.props.available_roles]}\n          >\n            <Form onSubmit={this.onSubmit}>\n              <Table celled padded striped attached>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Name\" defaultMessage=\"Name\" />\n                    </Table.HeaderCell>\n                    {this.props.available_roles?.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.title}\n                      </Table.HeaderCell>\n                    ))}\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {this.state.entries?.map((entry) => (\n                    <Table.Row key={entry.id}>\n                      <Table.Cell>\n                        <IconOld\n                          name={entry.type === 'user' ? 'user' : 'users'}\n                          title={\n                            entry.type === 'user'\n                              ? this.props.intl.formatMessage(messages.user)\n                              : this.props.intl.formatMessage(messages.group)\n                          }\n                        />{' '}\n                        {entry.title}\n                        {entry.login && ` (${entry.login})`}\n                      </Table.Cell>\n                      {this.props.available_roles?.map((role) => (\n                        <Table.Cell key={role.id}>\n                          {entry.roles[role.id] === 'global' && (\n                            <IconOld\n                              name=\"check circle outline\"\n                              title={this.props.intl.formatMessage(\n                                messages.globalRole,\n                              )}\n                              color=\"blue\"\n                            />\n                          )}\n                          {entry.roles[role.id] === 'acquired' && (\n                            <IconOld\n                              name=\"check circle outline\"\n                              color=\"green\"\n                              title={this.props.intl.formatMessage(\n                                messages.inheritedValue,\n                              )}\n                            />\n                          )}\n                          {typeof entry.roles[role.id] === 'boolean' && (\n                            <Checkbox\n                              onChange={this.onChange}\n                              value={`${entry.id}:${role.id}`}\n                              checked={entry.roles[role.id]}\n                              disabled={entry.login === this.props.login}\n                            />\n                          )}\n                        </Table.Cell>\n                      ))}\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n              <Segment attached>\n                <Form.Field>\n                  <Checkbox\n                    checked={this.state.inherit}\n                    onChange={this.onToggleInherit}\n                    label={this.props.intl.formatMessage(messages.inherit)}\n                  />\n                </Form.Field>\n                <p className=\"help\">\n                  <FormattedMessage\n                    id=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                    defaultMessage=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                    values={{\n                      inherited: (\n                        <IconOld name=\"check circle outline\" color=\"green\" />\n                      ),\n                      global: (\n                        <IconOld name=\"check circle outline\" color=\"blue\" />\n                      ),\n                    }}\n                  />\n                </p>\n              </Segment>\n              <Segment className=\"actions\" attached clearing>\n                <Button\n                  basic\n                  primary\n                  floated=\"right\"\n                  type=\"submit\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  title={this.props.intl.formatMessage(messages.save)}\n                  loading={this.props.updateRequest.loading}\n                  onClick={this.onSubmit}\n                >\n                  <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                </Button>\n                <Button\n                  basic\n                  secondary\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  title={this.props.intl.formatMessage(messages.cancel)}\n                  floated=\"right\"\n                  onClick={this.onCancel}\n                >\n                  <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                </Button>\n              </Segment>\n            </Form>\n          </Plug>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      entries: state.sharing.data.entries,\n      inherit: state.sharing.data.inherit,\n      available_roles: state.sharing.data.available_roles,\n      updateRequest: state.sharing.update,\n      pathname: props.location.pathname,\n      title: state.content.data.title,\n      login: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n    }),\n    { updateSharing, getSharing },\n  ),\n)(SharingComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Search for user or group","defaultMessage":"Search for user or group"},{"id":"Inherit permissions from higher levels","defaultMessage":"Inherit permissions from higher levels"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Back","defaultMessage":"Back"},{"id":"Sharing","defaultMessage":"Sharing"},{"id":"User","defaultMessage":"User"},{"id":"Group","defaultMessage":"Group"},{"id":"Global role","defaultMessage":"Global role"},{"id":"Inherited value","defaultMessage":"Inherited value"},{"id":"Permissions updated","defaultMessage":"Permissions updated"},{"id":"Permissions have been updated successfully","defaultMessage":"Permissions have been updated successfully"},{"id":"Sharing for {title}","defaultMessage":"Sharing for {title}"},{"id":"You can control who can view and edit your item using the list below.","defaultMessage":"You can control who can view and edit your item using the list below."},{"id":"Name","defaultMessage":"Name"},{"id":"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.","defaultMessage":"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator."}]}},"sourceType":"module"}