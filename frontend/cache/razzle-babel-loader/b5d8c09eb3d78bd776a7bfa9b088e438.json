{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\n// This is a custom list widget that takes a context from\n// The main Edit component to control the current slide (element)\n// and syncs it with the current element in the object list.\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Accordion, Button, Segment } from 'semantic-ui-react';\nimport { DragDropList, FormFieldWrapper, Icon } from '@plone/volto/components';\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { v4 as uuid } from 'uuid';\nimport { SliderContext } from './Edit';\nconst messages = defineMessages({\n  labelRemoveItem: {\n    \"id\": \"Remove item\",\n    \"defaultMessage\": \"Remove item\"\n  },\n  labelCollapseItem: {\n    \"id\": \"Collapse item\",\n    \"defaultMessage\": \"Collapse item\"\n  },\n  labelShowItem: {\n    \"id\": \"Show item\",\n    \"defaultMessage\": \"Show item\"\n  },\n  emptyObjectList: {\n    \"id\": \"Empty object list\",\n    \"defaultMessage\": \"Empty object list\"\n  },\n  add: {\n    \"id\": \"Add (object list)\",\n    \"defaultMessage\": \"Add\"\n  }\n});\n/**\n * This is a DataGridField-equivalent widget for schema-based values.\n * The shape of the items in the array is defined using a schema.\n *\n * ObjectListWidget can receive an optional `schemaExtender` prop which is\n * a function that can mutate the schema for each individual item in the array.\n * An example schema definition of the a field that renders with the\n * ObjectListWidget:\n *\n * ```jsx\n *  columns: {\n *    title: 'Columns',\n *    description: 'Leave empty to show all columns',\n *    schema: SomeItemSchema,\n *    widget: 'object_list',\n *    schemaExtender: (schema, data) => {\n *      const mutated = lodash.cloneDeep(schema);\n *      mutated.properties.extraField = {\n *        title: 'Extra field',\n *      }\n *      mutated.fieldsets[0].fields.push('extraField');\n *      return mutated;\n *    }\n *  },\n * ```\n */\n\nconst SliderObjectListWidget = props => {\n  const {\n    block,\n    fieldSet,\n    id,\n    schema,\n    value = [],\n    onChange,\n    schemaExtender\n  } = props;\n  const intl = useIntl();\n  const {\n    slideIndex,\n    setSlideIndex\n  } = React.useContext(SliderContext);\n\n  function handleChangeColumn(e, blockProps) {\n    const {\n      index\n    } = blockProps;\n    const newIndex = slideIndex === index ? -1 : index;\n    setSlideIndex(newIndex);\n  }\n\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n  const topLayerShadow = '0 1px 1px rgba(0,0,0,0.15)';\n  const secondLayer = ', 0 10px 0 -5px #eee, 0 10px 1px -4px rgba(0,0,0,0.15)';\n  const thirdLayer = ', 0 20px 0 -10px #eee, 0 20px 1px -9px rgba(0,0,0,0.15)';\n  return __jsx(\"div\", {\n    className: \"objectlist-widget\"\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    noForInFieldLabel: true,\n    className: \"objectlist\"\n  }), __jsx(\"div\", {\n    className: \"add-item-button-wrapper\"\n  }, __jsx(Button, {\n    compact: true,\n    icon: true,\n    \"aria-label\": objectSchema.addMessage || `${intl.formatMessage(messages.add)} ${objectSchema.title}`,\n    onClick: e => {\n      e.preventDefault();\n      onChange(id, [...value, {\n        '@id': uuid()\n      }]);\n      setSlideIndex(value.length);\n    }\n  }, __jsx(Icon, {\n    name: addSVG,\n    size: \"18px\"\n  }), \"\\xA0\", objectSchema.addMessage || `${intl.formatMessage(messages.add)} ${objectSchema.title}`)), value.length === 0 && __jsx(\"input\", {\n    \"aria-labelledby\": `fieldset-${fieldSet || 'default'}-field-label-${id}`,\n    type: \"hidden\",\n    value: intl.formatMessage(messages.emptyObjectList)\n  })), __jsx(DragDropList, {\n    style: {\n      boxShadow: `${topLayerShadow}${value.length > 1 ? secondLayer : ''}${value.length > 2 ? thirdLayer : ''}`\n    },\n    forwardedAriaLabelledBy: `fieldset-${fieldSet || 'default'}-field-label-${id}`,\n    childList: value.map(o => [o['@id'], o]),\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      const first = value[source.index];\n      const second = value[destination.index];\n      value[destination.index] = first;\n      value[source.index] = second;\n      onChange(id, value);\n      return true;\n    }\n  }, _ref => {\n    let {\n      child,\n      childId,\n      index,\n      draginfo\n    } = _ref;\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      key: childId\n    }), __jsx(Accordion, {\n      key: index,\n      fluid: true,\n      styled: true\n    }, __jsx(Accordion.Title, {\n      active: slideIndex === index,\n      index: index,\n      onClick: handleChangeColumn,\n      \"aria-label\": `${slideIndex === index ? intl.formatMessage(messages.labelCollapseItem) : intl.formatMessage(messages.labelShowItem)} #${index + 1}`\n    }, __jsx(\"button\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle\"\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\"\n    })), __jsx(\"div\", {\n      className: \"accordion-title-wrapper\"\n    }, `${objectSchema.title} #${index + 1}`), __jsx(\"div\", {\n      className: \"accordion-tools\"\n    }, __jsx(\"button\", {\n      \"aria-label\": `${intl.formatMessage(messages.labelRemoveItem)} #${index + 1}`,\n      onClick: () => {\n        onChange(id, value.filter((v, i) => i !== index));\n      }\n    }, __jsx(Icon, {\n      name: deleteSVG,\n      size: \"20px\",\n      color: \"#e40166\"\n    })), slideIndex === index ? __jsx(Icon, {\n      name: upSVG,\n      size: \"20px\"\n    }) : __jsx(Icon, {\n      name: downSVG,\n      size: \"20px\"\n    }))), __jsx(Accordion.Content, {\n      active: slideIndex === index\n    }, __jsx(Segment, null, __jsx(ObjectWidget, {\n      id: `${id}-${index}`,\n      key: `ow-${id}-${index}`,\n      block: block,\n      schema: schemaExtender ? schemaExtender(schema, child, intl) : objectSchema,\n      value: child,\n      onChange: (fi, fv) => {\n        const newvalue = value.map((v, i) => i !== index ? v : fv);\n        onChange(id, newvalue);\n      }\n    })))));\n  }));\n};\n\nexport default SliderObjectListWidget;","map":{"version":3,"names":["React","defineMessages","useIntl","Accordion","Button","Segment","DragDropList","FormFieldWrapper","Icon","ObjectWidget","upSVG","downSVG","deleteSVG","addSVG","dragSVG","v4","uuid","SliderContext","messages","labelRemoveItem","labelCollapseItem","labelShowItem","emptyObjectList","add","SliderObjectListWidget","props","block","fieldSet","id","schema","value","onChange","schemaExtender","intl","slideIndex","setSlideIndex","useContext","handleChangeColumn","e","blockProps","index","newIndex","objectSchema","topLayerShadow","secondLayer","thirdLayer","addMessage","formatMessage","title","preventDefault","length","boxShadow","map","o","result","source","destination","first","second","child","childId","draginfo","innerRef","draggableProps","visibility","display","dragHandleProps","filter","v","i","fi","fv","newvalue"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/components/ObjectListWidget.jsx"],"sourcesContent":["// This is a custom list widget that takes a context from\n// The main Edit component to control the current slide (element)\n// and syncs it with the current element in the object list.\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Accordion, Button, Segment } from 'semantic-ui-react';\nimport { DragDropList, FormFieldWrapper, Icon } from '@plone/volto/components';\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { v4 as uuid } from 'uuid';\nimport { SliderContext } from './Edit';\n\nconst messages = defineMessages({\n  labelRemoveItem: {\n    id: 'Remove item',\n    defaultMessage: 'Remove item',\n  },\n  labelCollapseItem: {\n    id: 'Collapse item',\n    defaultMessage: 'Collapse item',\n  },\n  labelShowItem: {\n    id: 'Show item',\n    defaultMessage: 'Show item',\n  },\n  emptyObjectList: {\n    id: 'Empty object list',\n    defaultMessage: 'Empty object list',\n  },\n  add: {\n    id: 'Add (object list)',\n    defaultMessage: 'Add',\n  },\n});\n\n/**\n * This is a DataGridField-equivalent widget for schema-based values.\n * The shape of the items in the array is defined using a schema.\n *\n * ObjectListWidget can receive an optional `schemaExtender` prop which is\n * a function that can mutate the schema for each individual item in the array.\n * An example schema definition of the a field that renders with the\n * ObjectListWidget:\n *\n * ```jsx\n *  columns: {\n *    title: 'Columns',\n *    description: 'Leave empty to show all columns',\n *    schema: SomeItemSchema,\n *    widget: 'object_list',\n *    schemaExtender: (schema, data) => {\n *      const mutated = lodash.cloneDeep(schema);\n *      mutated.properties.extraField = {\n *        title: 'Extra field',\n *      }\n *      mutated.fieldsets[0].fields.push('extraField');\n *      return mutated;\n *    }\n *  },\n * ```\n */\nconst SliderObjectListWidget = (props) => {\n  const {\n    block,\n    fieldSet,\n    id,\n    schema,\n    value = [],\n    onChange,\n    schemaExtender,\n  } = props;\n\n  const intl = useIntl();\n\n  const { slideIndex, setSlideIndex } = React.useContext(SliderContext);\n\n  function handleChangeColumn(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = slideIndex === index ? -1 : index;\n\n    setSlideIndex(newIndex);\n  }\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n  const topLayerShadow = '0 1px 1px rgba(0,0,0,0.15)';\n  const secondLayer = ', 0 10px 0 -5px #eee, 0 10px 1px -4px rgba(0,0,0,0.15)';\n  const thirdLayer = ', 0 20px 0 -10px #eee, 0 20px 1px -9px rgba(0,0,0,0.15)';\n\n  return (\n    <div className=\"objectlist-widget\">\n      <FormFieldWrapper {...props} noForInFieldLabel className=\"objectlist\">\n        <div className=\"add-item-button-wrapper\">\n          <Button\n            compact\n            icon\n            aria-label={\n              objectSchema.addMessage ||\n              `${intl.formatMessage(messages.add)} ${objectSchema.title}`\n            }\n            onClick={(e) => {\n              e.preventDefault();\n              onChange(id, [\n                ...value,\n                {\n                  '@id': uuid(),\n                },\n              ]);\n              setSlideIndex(value.length);\n            }}\n          >\n            <Icon name={addSVG} size=\"18px\" />\n            &nbsp;\n            {/* Custom addMessage in schema, else default to english */}\n            {objectSchema.addMessage ||\n              `${intl.formatMessage(messages.add)} ${objectSchema.title}`}\n          </Button>\n        </div>\n        {value.length === 0 && (\n          <input\n            aria-labelledby={`fieldset-${\n              fieldSet || 'default'\n            }-field-label-${id}`}\n            type=\"hidden\"\n            value={intl.formatMessage(messages.emptyObjectList)}\n          />\n        )}\n      </FormFieldWrapper>\n      <DragDropList\n        style={{\n          boxShadow: `${topLayerShadow}${value.length > 1 ? secondLayer : ''}${\n            value.length > 2 ? thirdLayer : ''\n          }`,\n        }}\n        forwardedAriaLabelledBy={`fieldset-${\n          fieldSet || 'default'\n        }-field-label-${id}`}\n        childList={value.map((o) => [o['@id'], o])}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n\n          const first = value[source.index];\n          const second = value[destination.index];\n          value[destination.index] = first;\n          value[source.index] = second;\n\n          onChange(id, value);\n          return true;\n        }}\n      >\n        {({ child, childId, index, draginfo }) => {\n          return (\n            <div\n              ref={draginfo.innerRef}\n              {...draginfo.draggableProps}\n              key={childId}\n            >\n              <Accordion key={index} fluid styled>\n                <Accordion.Title\n                  active={slideIndex === index}\n                  index={index}\n                  onClick={handleChangeColumn}\n                  aria-label={`${\n                    slideIndex === index\n                      ? intl.formatMessage(messages.labelCollapseItem)\n                      : intl.formatMessage(messages.labelShowItem)\n                  } #${index + 1}`}\n                >\n                  <button\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </button>\n\n                  <div className=\"accordion-title-wrapper\">\n                    {`${objectSchema.title} #${index + 1}`}\n                  </div>\n                  <div className=\"accordion-tools\">\n                    <button\n                      aria-label={`${intl.formatMessage(\n                        messages.labelRemoveItem,\n                      )} #${index + 1}`}\n                      onClick={() => {\n                        onChange(\n                          id,\n                          value.filter((v, i) => i !== index),\n                        );\n                      }}\n                    >\n                      <Icon name={deleteSVG} size=\"20px\" color=\"#e40166\" />\n                    </button>\n                    {slideIndex === index ? (\n                      <Icon name={upSVG} size=\"20px\" />\n                    ) : (\n                      <Icon name={downSVG} size=\"20px\" />\n                    )}\n                  </div>\n                </Accordion.Title>\n                <Accordion.Content active={slideIndex === index}>\n                  <Segment>\n                    <ObjectWidget\n                      id={`${id}-${index}`}\n                      key={`ow-${id}-${index}`}\n                      block={block}\n                      schema={\n                        schemaExtender\n                          ? schemaExtender(schema, child, intl)\n                          : objectSchema\n                      }\n                      value={child}\n                      onChange={(fi, fv) => {\n                        const newvalue = value.map((v, i) =>\n                          i !== index ? v : fv,\n                        );\n                        onChange(id, newvalue);\n                      }}\n                    />\n                  </Segment>\n                </Accordion.Content>\n              </Accordion>\n            </div>\n          );\n        }}\n      </DragDropList>\n    </div>\n  );\n};\nexport default SliderObjectListWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Remove item","defaultMessage":"Remove item"},{"id":"Collapse item","defaultMessage":"Collapse item"},{"id":"Show item","defaultMessage":"Show item"},{"id":"Empty object list","defaultMessage":"Empty object list"},{"id":"Add (object list)","defaultMessage":"Add"}]}},"sourceType":"module"}