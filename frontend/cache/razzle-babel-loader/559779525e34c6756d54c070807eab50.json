{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { toPublicURL, Helmet } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst ContentMetadataTags = props => {\n  var _ref;\n\n  const {\n    opengraph_title,\n    opengraph_description,\n    seo_title,\n    seo_description,\n    seo_canonical_url,\n    seo_noindex,\n    title,\n    description\n  } = props.content;\n\n  const getContentImageInfo = () => {\n    var _opengraph_image$scal, _opengraph_image$scal2, _image$scales, _image$scales$large, _opengraph_image$scal3;\n\n    const {\n      contentMetadataTagsImageField\n    } = config.settings;\n    const image = props.content[contentMetadataTagsImageField];\n    const {\n      opengraph_image\n    } = props.content;\n    const contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null\n    };\n    contentImageInfo.contentHasImage = (opengraph_image === null || opengraph_image === void 0 ? void 0 : (_opengraph_image$scal = opengraph_image.scales) === null || _opengraph_image$scal === void 0 ? void 0 : (_opengraph_image$scal2 = _opengraph_image$scal.large) === null || _opengraph_image$scal2 === void 0 ? void 0 : _opengraph_image$scal2.download) || (image === null || image === void 0 ? void 0 : (_image$scales = image.scales) === null || _image$scales === void 0 ? void 0 : (_image$scales$large = _image$scales.large) === null || _image$scales$large === void 0 ? void 0 : _image$scales$large.download) || false;\n\n    if (contentImageInfo.contentHasImage && opengraph_image !== null && opengraph_image !== void 0 && (_opengraph_image$scal3 = opengraph_image.scales) !== null && _opengraph_image$scal3 !== void 0 && _opengraph_image$scal3.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n\n    return contentImageInfo;\n  };\n\n  const contentImageInfo = getContentImageInfo();\n  return __jsx(React.Fragment, null, __jsx(Helmet, null, __jsx(\"title\", null, (_ref = seo_title || title) === null || _ref === void 0 ? void 0 : _ref.replace(/\\u00AD/g, '')), __jsx(\"meta\", {\n    name: \"description\",\n    content: seo_description || description\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: opengraph_title || seo_title || title\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: seo_canonical_url || toPublicURL(props.content['@id'])\n  }), seo_noindex && __jsx(\"meta\", {\n    name: \"robots\",\n    content: \"noindex\"\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image\",\n    content: toPublicURL(contentImageInfo.url)\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:width\",\n    content: contentImageInfo.width\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:height\",\n    content: contentImageInfo.height\n  }), (opengraph_description || seo_description || description) && __jsx(\"meta\", {\n    property: \"og:description\",\n    content: opengraph_description || seo_description || description\n  }), __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  })));\n};\n\nexport default ContentMetadataTags;","map":{"version":3,"names":["React","toPublicURL","Helmet","config","ContentMetadataTags","props","opengraph_title","opengraph_description","seo_title","seo_description","seo_canonical_url","seo_noindex","title","description","content","getContentImageInfo","contentMetadataTagsImageField","settings","image","opengraph_image","contentImageInfo","contentHasImage","url","height","width","scales","large","download","replace"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/theme/ContentMetadataTags/ContentMetadataTags.jsx"],"sourcesContent":["import React from 'react';\nimport { toPublicURL, Helmet } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst ContentMetadataTags = (props) => {\n  const {\n    opengraph_title,\n    opengraph_description,\n    seo_title,\n    seo_description,\n    seo_canonical_url,\n    seo_noindex,\n    title,\n    description,\n  } = props.content;\n\n  const getContentImageInfo = () => {\n    const { contentMetadataTagsImageField } = config.settings;\n    const image = props.content[contentMetadataTagsImageField];\n    const { opengraph_image } = props.content;\n\n    const contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null,\n    };\n    contentImageInfo.contentHasImage =\n      opengraph_image?.scales?.large?.download ||\n      image?.scales?.large?.download ||\n      false;\n\n    if (contentImageInfo.contentHasImage && opengraph_image?.scales?.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n\n    return contentImageInfo;\n  };\n\n  const contentImageInfo = getContentImageInfo();\n\n  return (\n    <>\n      <Helmet>\n        <title>{(seo_title || title)?.replace(/\\u00AD/g, '')}</title>\n        <meta name=\"description\" content={seo_description || description} />\n        <meta\n          property=\"og:title\"\n          content={opengraph_title || seo_title || title}\n        />\n        <meta\n          property=\"og:url\"\n          content={seo_canonical_url || toPublicURL(props.content['@id'])}\n        />\n        {seo_noindex && <meta name=\"robots\" content=\"noindex\" />}\n        {contentImageInfo.contentHasImage && (\n          <meta\n            property=\"og:image\"\n            content={toPublicURL(contentImageInfo.url)}\n          />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:width\" content={contentImageInfo.width} />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:height\" content={contentImageInfo.height} />\n        )}\n        {(opengraph_description || seo_description || description) && (\n          <meta\n            property=\"og:description\"\n            content={opengraph_description || seo_description || description}\n          />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Helmet>\n    </>\n  );\n};\n\nexport default ContentMetadataTags;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}