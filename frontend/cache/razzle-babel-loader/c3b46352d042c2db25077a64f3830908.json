{"ast":null,"code":"import _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nvar _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport config from '@plone/volto/registry';\n\nconst Edit = props => {\n  _s();\n\n  var _data$data, _data$instructions;\n\n  const {\n    0: selectedBlock,\n    1: setSelectedBlock\n  } = useState({});\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription\n  } = props;\n  const intl = useIntl();\n  const properties = _isEmpty(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.blocks) ? emptyAccordion(3) : data.data;\n  const metadata = props.metadata || props.properties;\n\n  const applySchemaEnhancer = originalSchema => {\n    var _blocks$blocksConfig$, _activeItem;\n\n    let schema, schemaEnhancer;\n    const formData = data;\n    const {\n      blocks\n    } = config;\n    const blockType = formData['@type'];\n    const variations = (blocks === null || blocks === void 0 ? void 0 : (_blocks$blocksConfig$ = blocks.blocksConfig[blockType]) === null || _blocks$blocksConfig$ === void 0 ? void 0 : _blocks$blocksConfig$.variations) || [];\n\n    if (variations.length === 0) {\n      var _blocks$blocksConfig, _blocks$blocksConfig$2;\n\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = (_blocks$blocksConfig = blocks.blocksConfig) === null || _blocks$blocksConfig === void 0 ? void 0 : (_blocks$blocksConfig$2 = _blocks$blocksConfig[blockType]) === null || _blocks$blocksConfig$2 === void 0 ? void 0 : _blocks$blocksConfig$2.schemaEnhancer;\n      if (schemaEnhancer) schema = schemaEnhancer({\n        schema: originalSchema,\n        formData,\n        intl\n      });\n    }\n\n    const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n    let activeItem = variations.find(item => item.id === activeItemName);\n    if (!activeItem) activeItem = variations.find(item => item.isDefault);\n    schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n    schema = schemaEnhancer ? schemaEnhancer({\n      schema: _cloneDeep(originalSchema),\n      formData,\n      intl\n    }) : _cloneDeep(originalSchema);\n    return schema;\n  };\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n\n\n  const setInitialData = () => {\n    const accordionSchema = applySchemaEnhancer(AccordionBlockSchema({\n      intl\n    }));\n    const defaultValues = Object.keys(accordionSchema.properties).reduce((accumulator, currentVal) => {\n      return accordionSchema.properties[currentVal].default ? _objectSpread(_objectSpread({}, accumulator), {}, {\n        [currentVal]: accordionSchema.properties[currentVal].default\n      }) : accumulator;\n    }, {});\n    return _objectSpread(_objectSpread(_objectSpread({}, defaultValues), data), {}, {\n      data: _objectSpread({}, properties)\n    });\n  };\n\n  React.useEffect(() => {\n    if (_isEmpty(data === null || data === void 0 ? void 0 : data.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n\n  }, []);\n  React.useEffect(() => {\n    properties.blocks_layout.items.map(item => {\n      if (_isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, properties), {}, {\n            blocks: _objectSpread(_objectSpread({}, properties.blocks), {}, {\n              [item]: emptyBlocksForm()\n            })\n          })\n        }));\n      }\n\n      return undefined;\n    });\n  }, [onChangeBlock, properties, selectedBlock, block, data, properties.blocks]);\n  const blockState = {};\n  const panelData = properties;\n  const panels = getPanels(panelData);\n\n  const handleTitleChange = (e, value) => {\n    const [uid, panel] = value;\n\n    const modifiedBlock = _objectSpread(_objectSpread({}, panel), {}, {\n      title: e.target.value,\n      '@type': 'accordionPanel'\n    });\n\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      data: _objectSpread(_objectSpread({}, panelData), {}, {\n        blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n          [uid]: modifiedBlock\n        })\n      })\n    }));\n  }; // Get editing instructions from block settings or props\n\n\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  return __jsx(\"fieldset\", {\n    className: \"accordion-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    onClick: () => {\n      setSelectedBlock({});\n      props.setSidebarTab(1);\n    },\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, data.title || 'Accordion'), panels.map((_ref, index) => {\n    let [uid, panel] = _ref;\n    return __jsx(AccordionEdit, {\n      uid: uid,\n      panel: panel,\n      panelData: panelData,\n      handleTitleChange: handleTitleChange,\n      handleTitleClick: () => setSelectedBlock({}),\n      data: data,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, __jsx(BlocksForm, {\n      key: uid,\n      title: data.placeholder,\n      description: instructions,\n      manage: manage,\n      allowedBlocks: data.allowedBlocks,\n      metadata: metadata,\n      properties: _isEmpty(panel) ? emptyBlocksForm() : panel,\n      selectedBlock: selected ? selectedBlock[uid] : null,\n      onSelectBlock: id => setSelectedBlock({\n        [uid]: id\n      }),\n      onChangeFormData: newFormData => {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, panelData), {}, {\n            blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n              [uid]: newFormData\n            })\n          })\n        }));\n      },\n      onChangeField: (id, value) => {\n        if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n          var _panelData$blocks;\n\n          blockState[id] = value;\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n            data: _objectSpread(_objectSpread({}, panelData), {}, {\n              blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n                [uid]: _objectSpread(_objectSpread({}, (_panelData$blocks = panelData.blocks) === null || _panelData$blocks === void 0 ? void 0 : _panelData$blocks[uid]), blockState)\n              })\n            })\n          }));\n        } else {\n          onChangeField(id, value);\n        }\n      },\n      pathname: pathname,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, (_ref2, editBlock, blockProps) => {\n      let {\n        draginfo\n      } = _ref2;\n      return __jsx(EditBlockWrapper, {\n        draginfo: draginfo,\n        blockProps: blockProps,\n        disabled: data.disableInnerButtons,\n        extraControls: __jsx(React.Fragment, null, instructions && __jsx(React.Fragment, null, __jsx(Button, {\n          icon: true,\n          basic: true,\n          title: \"Section help\",\n          onClick: () => {\n            setSelectedBlock({});\n            const tab = manage ? 0 : 1;\n            props.setSidebarTab(tab);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }\n        }, __jsx(Icon, {\n          name: helpSVG,\n          className: \"\",\n          size: \"19px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 27\n          }\n        })))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }\n      }, editBlock);\n    }));\n  }), __jsx(SidebarPortal, {\n    selected: selected && !Object.keys(selectedBlock).length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, instructions && __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  })), !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(BlockDataForm, {\n    schema: AccordionBlockSchema({\n      intl\n    }),\n    title: \"Accordion block\",\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(Edit, \"ycebbRi9eyeC/91i8QVOv89B9vM=\", false, function () {\n  return [useIntl];\n});\n\n_c = Edit;\nexport default _c2 = withBlockExtensions(Edit);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Edit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["BlocksForm","Icon","SidebarPortal","emptyBlocksForm","helpSVG","React","useState","Button","Segment","withBlockExtensions","BlockDataForm","useIntl","AccordionEdit","EditBlockWrapper","AccordionBlockSchema","emptyAccordion","getPanels","config","Edit","props","selectedBlock","setSelectedBlock","block","data","onChangeBlock","onChangeField","pathname","selected","manage","formDescription","intl","properties","blocks","metadata","applySchemaEnhancer","originalSchema","schema","schemaEnhancer","formData","blockType","variations","blocksConfig","length","activeItemName","variation","activeItem","find","item","id","isDefault","setInitialData","accordionSchema","defaultValues","Object","keys","reduce","accumulator","currentVal","default","useEffect","blocks_layout","items","map","undefined","blockState","panelData","panels","handleTitleChange","e","value","uid","panel","modifiedBlock","title","target","instructions","setSidebarTab","index","placeholder","allowedBlocks","newFormData","indexOf","editBlock","blockProps","draginfo","disableInnerButtons","tab","__html","readOnlySettings"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx"],"sourcesContent":["import { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport { isEmpty } from 'lodash';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport { cloneDeep } from 'lodash';\nimport config from '@plone/volto/registry';\n\nconst Edit = (props) => {\n  const [selectedBlock, setSelectedBlock] = useState({});\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription,\n  } = props;\n  const intl = useIntl();\n  const properties = isEmpty(data?.data?.blocks)\n    ? emptyAccordion(3)\n    : data.data;\n  const metadata = props.metadata || props.properties;\n\n  const applySchemaEnhancer = (originalSchema) => {\n    let schema, schemaEnhancer;\n    const formData = data;\n    const { blocks } = config;\n\n    const blockType = formData['@type'];\n    const variations = blocks?.blocksConfig[blockType]?.variations || [];\n\n    if (variations.length === 0) {\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = blocks.blocksConfig?.[blockType]?.schemaEnhancer;\n      if (schemaEnhancer)\n        schema = schemaEnhancer({ schema: originalSchema, formData, intl });\n    }\n\n    const activeItemName = formData?.variation;\n    let activeItem = variations.find((item) => item.id === activeItemName);\n    if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n    schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n    schema = schemaEnhancer\n      ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData, intl })\n      : cloneDeep(originalSchema);\n\n    return schema;\n  };\n\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n  const setInitialData = () => {\n    const accordionSchema = applySchemaEnhancer(AccordionBlockSchema({ intl }));\n    const defaultValues = Object.keys(accordionSchema.properties).reduce(\n      (accumulator, currentVal) => {\n        return accordionSchema.properties[currentVal].default\n          ? {\n              ...accumulator,\n              [currentVal]: accordionSchema.properties[currentVal].default,\n            }\n          : accumulator;\n      },\n      {},\n    );\n\n    return {\n      ...defaultValues,\n      ...data,\n      data: {\n        ...properties,\n      },\n    };\n  };\n\n  React.useEffect(() => {\n    if (isEmpty(data?.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n  }, []);\n\n  React.useEffect(() => {\n    properties.blocks_layout.items.map((item) => {\n      if (isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, {\n          ...data,\n          data: {\n            ...properties,\n            blocks: {\n              ...properties.blocks,\n              [item]: emptyBlocksForm(),\n            },\n          },\n        });\n      }\n      return undefined;\n    });\n  }, [\n    onChangeBlock,\n    properties,\n    selectedBlock,\n    block,\n    data,\n    properties.blocks,\n  ]);\n\n  const blockState = {};\n  const panelData = properties;\n  const panels = getPanels(panelData);\n\n  const handleTitleChange = (e, value) => {\n    const [uid, panel] = value;\n    const modifiedBlock = {\n      ...panel,\n      title: e.target.value,\n      '@type': 'accordionPanel',\n    };\n    onChangeBlock(block, {\n      ...data,\n      data: {\n        ...panelData,\n        blocks: {\n          ...panelData.blocks,\n          [uid]: modifiedBlock,\n        },\n      },\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  return (\n    <fieldset className=\"accordion-block\">\n      <legend\n        onClick={() => {\n          setSelectedBlock({});\n          props.setSidebarTab(1);\n        }}\n        aria-hidden=\"true\"\n      >\n        {data.title || 'Accordion'}\n      </legend>\n      {panels.map(([uid, panel], index) => (\n        <AccordionEdit\n          uid={uid}\n          panel={panel}\n          panelData={panelData}\n          handleTitleChange={handleTitleChange}\n          handleTitleClick={() => setSelectedBlock({})}\n          data={data}\n          index={index}\n        >\n          <BlocksForm\n            key={uid}\n            title={data.placeholder}\n            description={instructions}\n            manage={manage}\n            allowedBlocks={data.allowedBlocks}\n            metadata={metadata}\n            properties={isEmpty(panel) ? emptyBlocksForm() : panel}\n            selectedBlock={selected ? selectedBlock[uid] : null}\n            onSelectBlock={(id) =>\n              setSelectedBlock({\n                [uid]: id,\n              })\n            }\n            onChangeFormData={(newFormData) => {\n              onChangeBlock(block, {\n                ...data,\n                data: {\n                  ...panelData,\n                  blocks: {\n                    ...panelData.blocks,\n                    [uid]: newFormData,\n                  },\n                },\n              });\n            }}\n            onChangeField={(id, value) => {\n              if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n                blockState[id] = value;\n                onChangeBlock(block, {\n                  ...data,\n                  data: {\n                    ...panelData,\n                    blocks: {\n                      ...panelData.blocks,\n                      [uid]: {\n                        ...panelData.blocks?.[uid],\n                        ...blockState,\n                      },\n                    },\n                  },\n                });\n              } else {\n                onChangeField(id, value);\n              }\n            }}\n            pathname={pathname}\n          >\n            {({ draginfo }, editBlock, blockProps) => (\n              <EditBlockWrapper\n                draginfo={draginfo}\n                blockProps={blockProps}\n                disabled={data.disableInnerButtons}\n                extraControls={\n                  <>\n                    {instructions && (\n                      <>\n                        <Button\n                          icon\n                          basic\n                          title=\"Section help\"\n                          onClick={() => {\n                            setSelectedBlock({});\n                            const tab = manage ? 0 : 1;\n                            props.setSidebarTab(tab);\n                          }}\n                        >\n                          <Icon name={helpSVG} className=\"\" size=\"19px\" />\n                        </Button>\n                      </>\n                    )}\n                  </>\n                }\n              >\n                {editBlock}\n              </EditBlockWrapper>\n            )}\n          </BlocksForm>\n        </AccordionEdit>\n      ))}\n      <SidebarPortal selected={selected && !Object.keys(selectedBlock).length}>\n        {instructions && (\n          <Segment attached>\n            <div dangerouslySetInnerHTML={{ __html: instructions }} />\n          </Segment>\n        )}\n        {!data?.readOnlySettings && (\n          <BlockDataForm\n            schema={AccordionBlockSchema({ intl })}\n            title=\"Accordion block\"\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n            block={block}\n          />\n        )}\n      </SidebarPortal>\n    </fieldset>\n  );\n};\n\nexport default withBlockExtensions(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}