{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  },\n  delete: {\n    \"id\": \"delete\",\n    \"defaultMessage\": \"delete\"\n  }\n});\n\nclass EditBlockWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleClickOutside\", e => {\n      if (this.blockNode.current && doesNodeContainClick(this.blockNode.current, e)) return;\n\n      if (this.state.addNewBlockOpened) {\n        this.setState({\n          addNewBlockOpened: false\n        });\n        return true;\n      }\n    });\n\n    _defineProperty(this, \"blockNode\", /*#__PURE__*/React.createRef());\n\n    this.state = {\n      addNewBlockOpened: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  render() {\n    var _blockProps$blocksCon;\n\n    const {\n      intl,\n      blockProps,\n      draginfo,\n      extraControls,\n      disabled,\n      children\n    } = this.props;\n    const {\n      allowedBlocks,\n      block,\n      data,\n      onDeleteBlock,\n      onInsertBlock,\n      onMutateBlock,\n      onSelectBlock,\n      selected\n    } = blockProps;\n    const type = data['@type'];\n    const {\n      disableNewBlocks\n    } = data;\n    const dragVisible = !data.fixed;\n    const visible = selected;\n    const required = isBoolean(data.required) ? data.required : includes(config.blocks.requiredBlocks, type);\n    const allowedBlocksFromConfig = (_blockProps$blocksCon = blockProps.blocksConfig.accordion) === null || _blockProps$blocksCon === void 0 ? void 0 : _blockProps$blocksCon.allowedBlocks;\n    return __jsx(\"div\", {\n      ref: this.blockNode\n    }, __jsx(\"div\", _extends({\n      ref: draginfo === null || draginfo === void 0 ? void 0 : draginfo.innerRef\n    }, selected ? draginfo === null || draginfo === void 0 ? void 0 : draginfo.draggableProps : null, {\n      className: `block-editor-${data['@type']}`\n    }), (!selected || !visible || disabled) && __jsx(\"div\", _extends({\n      style: {\n        display: 'none' // keep react-beautiful-dnd happy\n\n      }\n    }, draginfo.dragHandleProps)), visible && __jsx(\"div\", {\n      className: \"block-toolbar\"\n    }, extraControls, !disabled && __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n      style: {\n        display: dragVisible ? 'inline-block' : 'none'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle wrapper-accordion-block\"\n    }), __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Drag and drop\"\n    }, __jsx(Icon, {\n      name: dragSVG,\n      size: \"19px\"\n    }))), !disableNewBlocks && !blockHasValue(data) && __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Add block\",\n      onClick: () => {\n        this.setState({\n          addNewBlockOpened: !this.state.addNewBlockOpened\n        });\n      },\n      className: \"accordion-block-add-button\"\n    }, __jsx(Icon, {\n      name: addSVG,\n      className: \"\",\n      size: \"19px\"\n    })), !required && __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Remove block\",\n      onClick: () => onDeleteBlock(block),\n      className: \"delete-button-accordion-block\",\n      \"aria-label\": intl.formatMessage(messages.delete)\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"19px\",\n      color: \"#e40166\"\n    })), this.state.addNewBlockOpened && __jsx(BlockChooser, {\n      onMutateBlock: (id, value) => {\n        onMutateBlock(id, value);\n        this.setState({\n          addNewBlockOpened: false\n        });\n      },\n      onInsertBlock: (id, value) => {\n        onSelectBlock(onInsertBlock(id, value));\n        this.setState({\n          addNewBlockOpened: false\n        });\n      },\n      currentBlock: block,\n      allowedBlocks: allowedBlocks || allowedBlocksFromConfig\n    }))), __jsx(\"div\", {\n      className: cx('ui drag block wrapper inner', type, {\n        multiSelected: this.props.multiSelected\n      })\n    }, children)));\n  }\n\n}\n\nexport default injectIntl(EditBlockWrapper);","map":{"version":3,"names":["React","Icon","BlockChooser","blockHasValue","config","Button","includes","isBoolean","defineMessages","injectIntl","doesNodeContainClick","cx","dragSVG","addSVG","trashSVG","messages","unknownBlock","delete","EditBlockWrapper","Component","constructor","props","e","blockNode","current","state","addNewBlockOpened","setState","createRef","componentDidMount","document","addEventListener","handleClickOutside","componentWillUnmount","removeEventListener","render","intl","blockProps","draginfo","extraControls","disabled","children","allowedBlocks","block","data","onDeleteBlock","onInsertBlock","onMutateBlock","onSelectBlock","selected","type","disableNewBlocks","dragVisible","fixed","visible","required","blocks","requiredBlocks","allowedBlocksFromConfig","blocksConfig","accordion","innerRef","draggableProps","display","dragHandleProps","formatMessage","id","value","multiSelected"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Blocks/Accordion/EditBlockWrapper.jsx"],"sourcesContent":["import React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\n\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n  delete: {\n    id: 'delete',\n    defaultMessage: 'delete',\n  },\n});\n\nclass EditBlockWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addNewBlockOpened: false,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  handleClickOutside = (e) => {\n    if (\n      this.blockNode.current &&\n      doesNodeContainClick(this.blockNode.current, e)\n    )\n      return;\n\n    if (this.state.addNewBlockOpened) {\n      this.setState({\n        addNewBlockOpened: false,\n      });\n      return true;\n    }\n  };\n\n  blockNode = React.createRef();\n\n  render() {\n    const {\n      intl,\n      blockProps,\n      draginfo,\n      extraControls,\n      disabled,\n      children,\n    } = this.props;\n\n    const {\n      allowedBlocks,\n      block,\n      data,\n      onDeleteBlock,\n      onInsertBlock,\n      onMutateBlock,\n      onSelectBlock,\n      selected,\n    } = blockProps;\n    const type = data['@type'];\n    const { disableNewBlocks } = data;\n    const dragVisible = !data.fixed;\n    const visible = selected;\n\n    const required = isBoolean(data.required)\n      ? data.required\n      : includes(config.blocks.requiredBlocks, type);\n\n    const allowedBlocksFromConfig =\n      blockProps.blocksConfig.accordion?.allowedBlocks;\n\n    return (\n      <div ref={this.blockNode}>\n        <div\n          ref={draginfo?.innerRef}\n          {...(selected ? draginfo?.draggableProps : null)}\n          className={`block-editor-${data['@type']}`}\n        >\n          {(!selected || !visible || disabled) && (\n            <div\n              style={{\n                display: 'none',\n                // keep react-beautiful-dnd happy\n              }}\n              {...draginfo.dragHandleProps}\n            ></div>\n          )}\n          {visible && (\n            <div className=\"block-toolbar\">\n              {extraControls}\n\n              {!disabled && (\n                <>\n                  <div\n                    style={{\n                      display: dragVisible ? 'inline-block' : 'none',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle wrapper-accordion-block\"\n                  >\n                    <Button icon basic title=\"Drag and drop\">\n                      <Icon name={dragSVG} size=\"19px\" />\n                    </Button>\n                  </div>\n\n                  {!disableNewBlocks && !blockHasValue(data) && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Add block\"\n                      onClick={() => {\n                        this.setState({\n                          addNewBlockOpened: !this.state.addNewBlockOpened,\n                        });\n                      }}\n                      className=\"accordion-block-add-button\"\n                    >\n                      <Icon name={addSVG} className=\"\" size=\"19px\" />\n                    </Button>\n                  )}\n                  {!required && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Remove block\"\n                      onClick={() => onDeleteBlock(block)}\n                      className=\"delete-button-accordion-block\"\n                      aria-label={intl.formatMessage(messages.delete)}\n                    >\n                      <Icon name={trashSVG} size=\"19px\" color=\"#e40166\" />\n                    </Button>\n                  )}\n                  {this.state.addNewBlockOpened && (\n                    <BlockChooser\n                      onMutateBlock={(id, value) => {\n                        onMutateBlock(id, value);\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      onInsertBlock={(id, value) => {\n                        onSelectBlock(onInsertBlock(id, value));\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      currentBlock={block}\n                      allowedBlocks={allowedBlocks || allowedBlocksFromConfig}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          <div\n            className={cx('ui drag block wrapper inner', type, {\n              multiSelected: this.props.multiSelected,\n            })}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(EditBlockWrapper);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"},{"id":"delete","defaultMessage":"delete"}]}},"sourceType":"module"}