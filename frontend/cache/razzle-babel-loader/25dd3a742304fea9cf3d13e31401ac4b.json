{"ast":null,"code":"import _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _nth from \"lodash/nth\";\nvar __jsx = React.createElement;\n\n/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"{id} Schema\",\n    \"defaultMessage\": \"{id} Schema\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  typeCreated: {\n    \"id\": \"Schema updates\",\n    \"defaultMessage\": \"Schema updates\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  }\n});\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\n\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"makeSchemaList\", schema => {\n      const result = {\n        title: 'Schema',\n        type: 'object',\n        fieldsets: [{\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default'\n        }],\n        properties: {\n          schema: {\n            description: 'Form schema',\n            title: 'Form schema',\n            type: 'schema',\n            id: 'schema'\n          }\n        },\n        required: [],\n        layouts: null\n      };\n      result.layouts = schema.layouts.slice();\n      return result;\n    });\n\n    _defineProperty(this, \"isEditable\", field => !field.behavior || field.behavior.includes('generated'));\n\n    _defineProperty(this, \"makeSchemaData\", (schema, contentType) => {\n      const fieldsets = schema.fieldsets.map(fieldset => {\n        const readOnlyFields = fieldset.fields.filter(fieldId => !this.isEditable(schema.properties[fieldId]) && fieldId !== 'changeNote');\n        const userCreatedFields = fieldset.fields.filter(fieldId => this.isEditable(schema.properties[fieldId]));\n        const changeNote = fieldset.fields.filter(fieldId => fieldId === 'changeNote');\n        return _objectSpread(_objectSpread({}, fieldset), {}, {\n          fields: [...readOnlyFields, ...userCreatedFields, ...changeNote]\n        });\n      });\n\n      const result = _objectSpread(_objectSpread({}, schema), {}, {\n        fieldsets,\n        contentType\n      });\n\n      return {\n        schema: JSON.stringify(result)\n      };\n    });\n\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = /*#__PURE__*/React.createRef();\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error\n      });\n    } // Schema GET\n\n\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n\n      let properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      let content = {};\n      let value, key;\n\n      for (key in properties) {\n        value = properties[key].default;\n\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content\n      });\n    } // Schema updated\n\n\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.loaded) {\n      // this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved)\n      }));\n    } // Schema update error\n\n\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.error) {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: JSON.stringify(nextProps.schemaRequest.put.error.response.body || nextProps.schemaRequest.put.error.response.text)\n      }));\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error\n      });\n    }\n\n    if (this.state.schema) {\n      var _this$props, _this$props$schema;\n\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n      return __jsx(\"div\", {\n        id: \"page-controlpanel-schema\",\n        className: \"ui container\"\n      }, __jsx(Header, {\n        disabled: true\n      }, this.props.intl.formatMessage(messages.title, {\n        id: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$schema = _this$props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.title) || this.props.id\n      })), __jsx(Form, {\n        ref: this.form,\n        schema: contentTypeSchema,\n        formData: schemaData,\n        pathname: this.props.pathname,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        hideActions: true\n      }), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar')\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          disabled: this.props.schemaRequest.put.loading,\n          loading: this.props.schemaRequest.put.loading\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save)\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: () => this.onCancel()\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel)\n        })))\n      })));\n    }\n\n    return __jsx(\"div\", null);\n  }\n\n}\n\n_defineProperty(ContentTypeSchema, \"defaultProps\", {});\n\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  pathname: props.location.pathname,\n  id: _nth(props.location.pathname.split('/'), -2)\n}), {\n  getSchema,\n  putSchema\n}))(ContentTypeSchema);","map":{"version":3,"names":["getSchema","putSchema","getParentUrl","Error","Form","Icon","Toast","Toolbar","clearSVG","saveSVG","React","Component","defineMessages","injectIntl","Portal","connect","toast","compose","Button","Header","messages","title","success","save","cancel","error","typeCreated","info","changesSaved","ContentTypeSchema","constructor","props","createRef","schema","result","type","fieldsets","fields","id","properties","description","required","layouts","slice","field","behavior","includes","contentType","map","fieldset","readOnlyFields","filter","fieldId","isEditable","userCreatedFields","changeNote","JSON","stringify","state","content","isClient","onCancel","bind","onSubmit","form","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","schemaRequest","loading","loaded","value","key","default","put","intl","formatMessage","response","body","text","data","url","pathname","history","push","render","contentTypeSchema","makeSchemaList","schemaData","makeSchemaData","document","getElementById","current","location","split"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx"],"sourcesContent":["/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { nth } from 'lodash';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Schema',\n    defaultMessage: '{id} Schema',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  typeCreated: {\n    id: 'Schema updates',\n    defaultMessage: 'Schema updates',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    putSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {};\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.loaded\n    ) {\n      // this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Schema update error\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.error\n    ) {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={JSON.stringify(\n            nextProps.schemaRequest.put.error.response.body ||\n              nextProps.schemaRequest.put.error.response.text,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  form = React.createRef();\n\n  makeSchemaList = (schema) => {\n    const result = {\n      title: 'Schema',\n      type: 'object',\n      fieldsets: [\n        {\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default',\n        },\n      ],\n      properties: {\n        schema: {\n          description: 'Form schema',\n          title: 'Form schema',\n          type: 'schema',\n          id: 'schema',\n        },\n      },\n      required: [],\n      layouts: null,\n    };\n    result.layouts = schema.layouts.slice();\n\n    return result;\n  };\n\n  isEditable = (field) =>\n    !field.behavior || field.behavior.includes('generated');\n\n  makeSchemaData = (schema, contentType) => {\n    const fieldsets = schema.fieldsets.map((fieldset) => {\n      const readOnlyFields = fieldset.fields.filter(\n        (fieldId) =>\n          !this.isEditable(schema.properties[fieldId]) &&\n          fieldId !== 'changeNote',\n      );\n      const userCreatedFields = fieldset.fields.filter((fieldId) =>\n        this.isEditable(schema.properties[fieldId]),\n      );\n      const changeNote = fieldset.fields.filter(\n        (fieldId) => fieldId === 'changeNote',\n      );\n      return {\n        ...fieldset,\n        fields: [...readOnlyFields, ...userCreatedFields, ...changeNote],\n      };\n    });\n    const result = {\n      ...schema,\n      fieldsets,\n      contentType,\n    };\n\n    return { schema: JSON.stringify(result) };\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.state.schema) {\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n\n      return (\n        <div id=\"page-controlpanel-schema\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: this.props?.schema?.title || this.props.id,\n            })}\n          </Header>\n          <Form\n            ref={this.form}\n            schema={contentTypeSchema}\n            formData={schemaData}\n            pathname={this.props.pathname}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            hideActions\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.schemaRequest.put.loading}\n                      loading={this.props.schemaRequest.put.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n    }),\n    {\n      getSchema,\n      putSchema,\n    },\n  ),\n)(ContentTypeSchema);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"{id} Schema","defaultMessage":"{id} Schema"},{"id":"Success","defaultMessage":"Success"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Error","defaultMessage":"Error"},{"id":"Schema updates","defaultMessage":"Schema updates"},{"id":"Info","defaultMessage":"Info"},{"id":"Changes saved.","defaultMessage":"Changes saved."}]}},"sourceType":"module"}