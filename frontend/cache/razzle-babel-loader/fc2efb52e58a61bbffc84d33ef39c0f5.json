{"ast":null,"code":"var _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Teaser/DefaultBody.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { getTeaserImageURL } from './utils';\nimport { MaybeWrap } from '@plone/volto/components';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    \"id\": \"Please choose an existing content as source for this element\",\n    \"defaultMessage\": \"Please choose an existing content as source for this element\"\n  }\n});\n\nconst TeaserDefaultTemplate = props => {\n  _s();\n\n  var _data$href, _data$preview_image;\n\n  const {\n    className,\n    data,\n    isEditMode\n  } = props;\n  const intl = useIntl();\n  const href = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : _data$href[0];\n  const image = (_data$preview_image = data.preview_image) === null || _data$preview_image === void 0 ? void 0 : _data$preview_image[0];\n  return __jsx(\"div\", {\n    className: cx('block teaser', className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, !href && isEditMode && __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-teaser-item placeholder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: imageBlockSVG,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }, intl.formatMessage(messages.PleaseChooseContent)))), href && __jsx(MaybeWrap, {\n    condition: !isEditMode,\n    as: UniversalLink,\n    href: href['@id'],\n    target: data.openLinkInNewTab ? '_blank' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-teaser-item default\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, (href.hasPreviewImage || href.image_field || image) && __jsx(\"div\", {\n    className: \"grid-image-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    src: flattenToAppURL(getTeaserImageURL(href, image)),\n    alt: \"\",\n    loading: \"lazy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }\n  })), __jsx(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, (data === null || data === void 0 ? void 0 : data.head_title) && __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 38\n    }\n  }, data === null || data === void 0 ? void 0 : data.head_title), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, data === null || data === void 0 ? void 0 : data.title), !data.hide_description && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 44\n    }\n  }, data === null || data === void 0 ? void 0 : data.description))))));\n};\n\n_s(TeaserDefaultTemplate, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c = TeaserDefaultTemplate;\nTeaserDefaultTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool\n};\nexport default TeaserDefaultTemplate;\n\nvar _c;\n\n$RefreshReg$(_c, \"TeaserDefaultTemplate\");","map":{"version":3,"names":["React","PropTypes","Message","defineMessages","useIntl","imageBlockSVG","flattenToAppURL","getTeaserImageURL","MaybeWrap","UniversalLink","cx","messages","PleaseChooseContent","TeaserDefaultTemplate","props","className","data","isEditMode","intl","href","image","preview_image","formatMessage","openLinkInNewTab","hasPreviewImage","image_field","head_title","title","hide_description","description","propTypes","objectOf","any","isRequired","bool"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Teaser/DefaultBody.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { getTeaserImageURL } from './utils';\nimport { MaybeWrap } from '@plone/volto/components';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\n\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    id: 'Please choose an existing content as source for this element',\n    defaultMessage:\n      'Please choose an existing content as source for this element',\n  },\n});\n\nconst TeaserDefaultTemplate = (props) => {\n  const { className, data, isEditMode } = props;\n  const intl = useIntl();\n  const href = data.href?.[0];\n  const image = data.preview_image?.[0];\n\n  return (\n    <div className={cx('block teaser', className)}>\n      <>\n        {!href && isEditMode && (\n          <Message>\n            <div className=\"grid-teaser-item placeholder\">\n              <img src={imageBlockSVG} alt=\"\" />\n              <p>{intl.formatMessage(messages.PleaseChooseContent)}</p>\n            </div>\n          </Message>\n        )}\n        {href && (\n          <MaybeWrap\n            condition={!isEditMode}\n            as={UniversalLink}\n            href={href['@id']}\n            target={data.openLinkInNewTab ? '_blank' : null}\n          >\n            <div className=\"grid-teaser-item default\">\n              {(href.hasPreviewImage || href.image_field || image) && (\n                <div className=\"grid-image-wrapper\">\n                  <img\n                    src={flattenToAppURL(getTeaserImageURL(href, image))}\n                    alt=\"\"\n                    loading=\"lazy\"\n                  />\n                </div>\n              )}\n              <div className=\"content\">\n                {data?.head_title && <h2>{data?.head_title}</h2>}\n\n                <h3>{data?.title}</h3>\n                {!data.hide_description && <p>{data?.description}</p>}\n              </div>\n            </div>\n          </MaybeWrap>\n        )}\n      </>\n    </div>\n  );\n};\n\nTeaserDefaultTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nexport default TeaserDefaultTemplate;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Please choose an existing content as source for this element","defaultMessage":"Please choose an existing content as source for this element"}]}},"sourceType":"module"}