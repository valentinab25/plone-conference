{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Edit image block.\n * @module components/manage/Blocks/Image/Edit\n */\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { Message } from 'semantic-ui-react';\nimport { LeadImageSidebar, SidebarPortal } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nconst messages = defineMessages({\n  ImageBlockInputPlaceholder: {\n    \"id\": \"Upload a lead image in the 'Lead Image' content field.\",\n    \"defaultMessage\": \"Upload a lead image in the 'Lead Image' content field.\"\n  }\n});\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\n\nclass Edit extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"node\", /*#__PURE__*/React.createRef());\n  }\n\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      align\n    }));\n  }\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      data,\n      properties\n    } = this.props;\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.ImageBlockInputPlaceholder);\n    return __jsx(\"div\", {\n      className: cx('block image align', {\n        center: !Boolean(data.align)\n      }, data.align)\n    }, !properties.image && __jsx(Message, null, __jsx(\"center\", null, __jsx(\"img\", {\n      src: imageBlockSVG,\n      alt: \"\"\n    }), __jsx(\"div\", {\n      className: \"message-text\"\n    }, placeholder))), properties.image && __jsx(\"img\", {\n      className: cx({\n        'full-width': data.align === 'full'\n      }),\n      src: properties.image.data ? `data:${properties.image['content-type']};base64,${properties.image.data}` : flattenToAppURL(properties.image.download),\n      alt: data.image_caption || ''\n    }), __jsx(SidebarPortal, {\n      selected: this.props.selected\n    }, __jsx(LeadImageSidebar, this.props)));\n  }\n\n}\n\nexport default compose(injectIntl)(Edit);","map":{"version":3,"names":["React","Component","compose","defineMessages","injectIntl","cx","Message","LeadImageSidebar","SidebarPortal","flattenToAppURL","imageBlockSVG","messages","ImageBlockInputPlaceholder","Edit","createRef","onAlignBlock","align","props","onChangeBlock","block","data","shouldComponentUpdate","nextProps","selected","render","properties","placeholder","intl","formatMessage","center","Boolean","image","download","image_caption"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/Edit.jsx"],"sourcesContent":["/**\n * Edit image block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { Message } from 'semantic-ui-react';\nimport { isEqual } from 'lodash';\n\nimport { LeadImageSidebar, SidebarPortal } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nconst messages = defineMessages({\n  ImageBlockInputPlaceholder: {\n    id: \"Upload a lead image in the 'Lead Image' content field.\",\n    defaultMessage: \"Upload a lead image in the 'Lead Image' content field.\",\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    openObjectBrowser: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n\n  node = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data, properties } = this.props;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.ImageBlockInputPlaceholder);\n\n    return (\n      <div\n        className={cx(\n          'block image align',\n          {\n            center: !Boolean(data.align),\n          },\n          data.align,\n        )}\n      >\n        {!properties.image && (\n          <Message>\n            <center>\n              <img src={imageBlockSVG} alt=\"\" />\n              <div className=\"message-text\">{placeholder}</div>\n            </center>\n          </Message>\n        )}\n        {properties.image && (\n          <img\n            className={cx({ 'full-width': data.align === 'full' })}\n            src={\n              properties.image.data\n                ? `data:${properties.image['content-type']};base64,${properties.image.data}`\n                : flattenToAppURL(properties.image.download)\n            }\n            alt={data.image_caption || ''}\n          />\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <LeadImageSidebar {...this.props} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default compose(injectIntl)(Edit);\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAGA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,yBAAhD;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,OAAOC,aAAP,MAA0B,6DAA1B;AAEA,MAAMC,QAAQ,GAAGR,cAAc,CAAC;EAC9BS,0BAA0B;IAAA;IAAA;EAAA;AADI,CAAD,CAA/B;AAOA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAN,SAAmBZ,SAAnB,CAA6B;EAAA;IAAA;;IAAA,2CAuCpBD,KAAK,CAACc,SAAN,EAvCoB;EAAA;;EAC3B;AACF;AACA;AACA;AACA;;EAYE;AACF;AACA;AACA;AACA;AACA;EACEC,YAAY,CAACC,KAAD,EAAQ;IAClB,KAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC,kCACK,KAAKF,KAAL,CAAWG,IADhB;MAEEJ;IAFF;EAID;EAED;AACF;AACA;AACA;AACA;;;EACEK,qBAAqB,CAACC,SAAD,EAAY;IAC/B,OAAO,KAAKL,KAAL,CAAWM,QAAX,IAAuB,CAAC,SAAQ,KAAKN,KAAL,CAAWG,IAAnB,EAAyBE,SAAS,CAACF,IAAnC,CAA/B;EACD;;EAID;AACF;AACA;AACA;AACA;EACEI,MAAM,GAAG;IACP,MAAM;MAAEJ,IAAF;MAAQK;IAAR,IAAuB,KAAKR,KAAlC;IACA,MAAMS,WAAW,GACf,KAAKT,KAAL,CAAWG,IAAX,CAAgBM,WAAhB,IACA,KAAKT,KAAL,CAAWU,IAAX,CAAgBC,aAAhB,CAA8BjB,QAAQ,CAACC,0BAAvC,CAFF;IAIA,OACE;MACE,SAAS,EAAEP,EAAE,CACX,mBADW,EAEX;QACEwB,MAAM,EAAE,CAACC,OAAO,CAACV,IAAI,CAACJ,KAAN;MADlB,CAFW,EAKXI,IAAI,CAACJ,KALM;IADf,GASG,CAACS,UAAU,CAACM,KAAZ,IACC,MAAC,OAAD,QACE,sBACE;MAAK,GAAG,EAAErB,aAAV;MAAyB,GAAG,EAAC;IAA7B,EADF,EAEE;MAAK,SAAS,EAAC;IAAf,GAA+BgB,WAA/B,CAFF,CADF,CAVJ,EAiBGD,UAAU,CAACM,KAAX,IACC;MACE,SAAS,EAAE1B,EAAE,CAAC;QAAE,cAAce,IAAI,CAACJ,KAAL,KAAe;MAA/B,CAAD,CADf;MAEE,GAAG,EACDS,UAAU,CAACM,KAAX,CAAiBX,IAAjB,GACK,QAAOK,UAAU,CAACM,KAAX,CAAiB,cAAjB,CAAiC,WAAUN,UAAU,CAACM,KAAX,CAAiBX,IAAK,EAD7E,GAEIX,eAAe,CAACgB,UAAU,CAACM,KAAX,CAAiBC,QAAlB,CALvB;MAOE,GAAG,EAAEZ,IAAI,CAACa,aAAL,IAAsB;IAP7B,EAlBJ,EA4BE,MAAC,aAAD;MAAe,QAAQ,EAAE,KAAKhB,KAAL,CAAWM;IAApC,GACE,MAAC,gBAAD,EAAsB,KAAKN,KAA3B,CADF,CA5BF,CADF;EAkCD;;AAtF0B;;AAyF7B,eAAef,OAAO,CAACE,UAAD,CAAP,CAAoBS,IAApB,CAAf"},"metadata":{"react-intl":{"messages":[{"id":"Upload a lead image in the 'Lead Image' content field.","defaultMessage":"Upload a lead image in the 'Lead Image' content field."}]}},"sourceType":"module"}