{"ast":null,"code":"var __jsx = React.createElement;\n\n/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Checkbox, Container, Form, Header, Input, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  }\n});\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\n\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: []\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: ''\n    });\n    this.setState({\n      isClient: true\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      var _this$props$aliases;\n\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({\n          isAliasCorrect: true\n        });\n      } else {\n        this.setState({\n          isAliasCorrect: false\n        });\n      }\n\n      if ((_this$props$aliases = this.props.aliases) !== null && _this$props$aliases !== void 0 && _this$props$aliases.items.find(item => item.path === this.state.newAlias)) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n      }\n    }\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.success),\n          content: this.props.intl.formatMessage(messages.successAdd)\n        }));\n      }\n\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n  }\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n\n\n  handleAltChange(val) {\n    this.setState({\n      newAlias: val\n    });\n  }\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n\n\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias\n      });\n      this.setState({\n        newAlias: ''\n      });\n    }\n  }\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n\n\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({\n          aliasesToRemove: newAliasesArr\n        });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias]\n      });\n    }\n  }\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n\n\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove\n    });\n    this.setState({\n      aliasesToRemove: []\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$aliases2;\n\n    return __jsx(Container, {\n      id: \"aliases\"\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.aliases)\n    }), __jsx(Segment.Group, {\n      raised: true\n    }, __jsx(Segment, {\n      className: \"primary\"\n    }, __jsx(FormattedMessage, {\n      id: \"URL Management for {title}\",\n      defaultMessage: \"URL Management for {title}\",\n      values: {\n        title: __jsx(\"q\", null, this.props.title)\n      }\n    })), __jsx(Segment, {\n      secondary: true\n    }, __jsx(FormattedMessage, {\n      id: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n      defaultMessage: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n    })), __jsx(Form, null, __jsx(Segment, null, __jsx(Header, {\n      size: \"medium\"\n    }, __jsx(FormattedMessage, {\n      id: \"Add a new alternative url\",\n      defaultMessage: \"Add a new alternative url\"\n    })), __jsx(\"p\", {\n      className: \"help\"\n    }, __jsx(FormattedMessage, {\n      id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      defaultMessage: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n    })), __jsx(Form.Field, null, __jsx(Input, {\n      id: \"alternative-url-input\",\n      name: \"alternative-url\",\n      placeholder: \"/example\",\n      value: this.state.newAlias,\n      onChange: e => this.handleAltChange(e.target.value)\n    }), !this.state.isAliasCorrect && this.state.newAlias !== '' && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path must start with a slash.\",\n      defaultMessage: \"Alternative url path must start with a slash.\"\n    })), this.state.isAliasAlready && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The provided alternative url already exists!\",\n      defaultMessage: \"The provided alternative url already exists!\"\n    }))), __jsx(Button, {\n      id: \"submit-alias\",\n      primary: true,\n      onClick: () => this.handleSubmitAlias(),\n      disabled: !this.state.isAliasCorrect || this.state.newAlias === '' || this.state.isAliasAlready\n    }, __jsx(FormattedMessage, {\n      id: \"Add\",\n      defaultMessage: \"Add\"\n    })))), __jsx(Form, null, __jsx(Segment, null, __jsx(Header, {\n      size: \"medium\"\n    }, __jsx(FormattedMessage, {\n      id: \"Existing alternative urls for this item\",\n      defaultMessage: \"Existing alternative urls for this item\"\n    })), (_this$props$aliases2 = this.props.aliases) === null || _this$props$aliases2 === void 0 ? void 0 : _this$props$aliases2.items.map((alias, i) => __jsx(Form.Field, {\n      key: i\n    }, __jsx(Checkbox, {\n      id: `alias-check-${i}`,\n      onChange: (e, _ref) => {\n        let {\n          value\n        } = _ref;\n        return this.handleCheckAlias(value);\n      },\n      value: alias.path,\n      label: alias.path,\n      checked: this.state.aliasesToRemove.includes(alias.path)\n    }))), __jsx(Button, {\n      id: \"remove-alias\",\n      onClick: () => this.handleRemoveAliases(),\n      primary: true,\n      disabled: this.state.aliasesToRemove.length === 0\n    }, __jsx(FormattedMessage, {\n      id: \"Remove\",\n      defaultMessage: \"Remove\"\n    }))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar')\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\"\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back)\n      }))\n    })));\n  }\n\n}\n\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$content$data;\n\n  return {\n    aliases: state.aliases,\n    pathname: props.location.pathname,\n    title: ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || ''\n  };\n}, {\n  addAliases,\n  getAliases,\n  removeAliases\n}))(Aliases);","map":{"version":3,"names":["React","Component","Helmet","connect","compose","Link","Portal","Button","Checkbox","Container","Form","Header","Input","Segment","FormattedMessage","defineMessages","injectIntl","removeAliases","addAliases","getAliases","Icon","Toolbar","backSVG","getBaseUrl","toast","Toast","messages","back","aliases","success","successAdd","Aliases","constructor","props","state","isClient","newAlias","isAliasCorrect","isAliasAlready","aliasesToRemove","componentDidMount","pathname","query","manual","datetime","batchSize","setState","componentDidUpdate","prevProps","prevState","charAt","items","find","item","path","UNSAFE_componentWillReceiveProps","nextProps","add","loading","loaded","error","intl","formatMessage","remove","handleAltChange","val","handleSubmitAlias","handleCheckAlias","alias","includes","index","indexOf","newAliasesArr","splice","handleRemoveAliases","render","title","e","target","value","color","map","i","length","document","getElementById","location","content","data"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Aliases/Aliases.jsx"],"sourcesContent":["/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Input,\n  Segment,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\n\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeAliases: PropTypes.func.isRequired,\n    addAliases: PropTypes.func.isRequired,\n    getAliases: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: '',\n    });\n    this.setState({ isClient: true });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({ isAliasCorrect: true });\n      } else {\n        this.setState({ isAliasCorrect: false });\n      }\n      if (\n        this.props.aliases?.items.find(\n          (item) => item.path === this.state.newAlias,\n        )\n      ) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n        toast.success(\n          <Toast\n            success\n            title={this.props.intl.formatMessage(messages.success)}\n            content={this.props.intl.formatMessage(messages.successAdd)}\n          />,\n        );\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({ newAlias: val });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias,\n      });\n      this.setState({ newAlias: '' });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({ aliasesToRemove: newAliasesArr });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias],\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove,\n    });\n    this.setState({ aliasesToRemove: [] });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"aliases\">\n        <Helmet title={this.props.intl.formatMessage(messages.aliases)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"URL Management for {title}\"\n              defaultMessage=\"URL Management for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n              defaultMessage=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n            />\n          </Segment>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Add a new alternative url\"\n                  defaultMessage=\"Add a new alternative url\"\n                />\n              </Header>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                  defaultMessage=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                />\n              </p>\n              <Form.Field>\n                <Input\n                  id=\"alternative-url-input\"\n                  name=\"alternative-url\"\n                  placeholder=\"/example\"\n                  value={this.state.newAlias}\n                  onChange={(e) => this.handleAltChange(e.target.value)}\n                />\n                {!this.state.isAliasCorrect && this.state.newAlias !== '' && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Alternative url path must start with a slash.\"\n                      defaultMessage=\"Alternative url path must start with a slash.\"\n                    />\n                  </p>\n                )}\n                {this.state.isAliasAlready && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"The provided alternative url already exists!\"\n                      defaultMessage=\"The provided alternative url already exists!\"\n                    />\n                  </p>\n                )}\n              </Form.Field>\n              <Button\n                id=\"submit-alias\"\n                primary\n                onClick={() => this.handleSubmitAlias()}\n                disabled={\n                  !this.state.isAliasCorrect ||\n                  this.state.newAlias === '' ||\n                  this.state.isAliasAlready\n                }\n              >\n                <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n              </Button>\n            </Segment>\n          </Form>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Existing alternative urls for this item\"\n                  defaultMessage=\"Existing alternative urls for this item\"\n                />\n              </Header>\n              {this.props.aliases?.items.map((alias, i) => (\n                <Form.Field key={i}>\n                  <Checkbox\n                    id={`alias-check-${i}`}\n                    onChange={(e, { value }) => this.handleCheckAlias(value)}\n                    value={alias.path}\n                    label={alias.path}\n                    checked={this.state.aliasesToRemove.includes(alias.path)}\n                  />\n                </Form.Field>\n              ))}\n              <Button\n                id=\"remove-alias\"\n                onClick={() => this.handleRemoveAliases()}\n                primary\n                disabled={this.state.aliasesToRemove.length === 0}\n              >\n                <FormattedMessage id=\"Remove\" defaultMessage=\"Remove\" />\n              </Button>\n            </Segment>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      aliases: state.aliases,\n      pathname: props.location.pathname,\n      title: state.content.data?.title || '',\n    }),\n    { addAliases, getAliases, removeAliases },\n  ),\n)(Aliases);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"URL Management for {title}","defaultMessage":"URL Management for {title}"},{"id":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.","defaultMessage":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs."},{"id":"Add a new alternative url","defaultMessage":"Add a new alternative url"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring."},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative url path must start with a slash."},{"id":"The provided alternative url already exists!","defaultMessage":"The provided alternative url already exists!"},{"id":"Add","defaultMessage":"Add"},{"id":"Existing alternative urls for this item","defaultMessage":"Existing alternative urls for this item"},{"id":"Remove","defaultMessage":"Remove"}]}},"sourceType":"module"}