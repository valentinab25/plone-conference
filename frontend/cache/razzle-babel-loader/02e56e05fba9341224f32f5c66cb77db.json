{"ast":null,"code":"var _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/components/Data.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { difference } from '@plone/volto/helpers';\nimport { usePrevious\n/* , replaceItemOfArray */\n} from '@plone/volto/helpers';\nimport { SliderSchema } from './schema';\nexport const replaceItemOfArray = (array, index, value) => Object.assign([...array], {\n  [index]: value\n});\n\nconst SliderData = props => {\n  const {\n    block,\n    data,\n    onChangeBlock\n  } = props;\n  const intl = useIntl();\n  const {\n    slides\n  } = props.data;\n  const previous = usePrevious(slides);\n  const schema = SliderSchema(_objectSpread(_objectSpread({}, props), {}, {\n    intl\n  }));\n  React.useEffect(() => {\n    if (previous) {\n      var _diff$index, _diff$index$href;\n\n      const diff = difference(slides, previous);\n      const index = diff.findIndex(val => val);\n\n      if ((_diff$index = diff[index]) !== null && _diff$index !== void 0 && (_diff$index$href = _diff$index.href) !== null && _diff$index$href !== void 0 && _diff$index$href[0]) {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          slides: replaceItemOfArray(data.slides, index, _objectSpread(_objectSpread({}, data.slides[index]), {}, {\n            title: diff[index].href[0].title,\n            description: diff[index].href[0].Description,\n            head_title: diff[index].href[0].head_title\n          }))\n        }));\n      }\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n\n  }, [slides]);\n  return __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  });\n};\n\nSliderData.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired\n};\nexport default SliderData;","map":{"version":3,"names":["React","PropTypes","useIntl","BlockDataForm","difference","usePrevious","SliderSchema","replaceItemOfArray","array","index","value","Object","assign","SliderData","props","block","data","onChangeBlock","intl","slides","previous","schema","useEffect","diff","findIndex","val","href","title","description","Description","head_title","id","propTypes","objectOf","any","isRequired","string","func"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-slider-block/src/components/Data.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { difference } from '@plone/volto/helpers';\nimport { usePrevious /* , replaceItemOfArray */ } from '@plone/volto/helpers';\n\nimport { SliderSchema } from './schema';\n\nexport const replaceItemOfArray = (array, index, value) =>\n  Object.assign([...array], { [index]: value });\n\nconst SliderData = (props) => {\n  const { block, data, onChangeBlock } = props;\n  const intl = useIntl();\n  const { slides } = props.data;\n  const previous = usePrevious(slides);\n  const schema = SliderSchema({ ...props, intl });\n\n  React.useEffect(() => {\n    if (previous) {\n      const diff = difference(slides, previous);\n      const index = diff.findIndex((val) => val);\n      if (diff[index]?.href?.[0]) {\n        onChangeBlock(block, {\n          ...data,\n          slides: replaceItemOfArray(data.slides, index, {\n            ...data.slides[index],\n            title: diff[index].href[0].title,\n            description: diff[index].href[0].Description,\n            head_title: diff[index].href[0].head_title,\n          }),\n        });\n      }\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [slides]);\n\n  return (\n    <BlockDataForm\n      schema={schema}\n      title={schema.title}\n      onChangeField={(id, value) => {\n        onChangeBlock(block, {\n          ...data,\n          [id]: value,\n        });\n      }}\n      formData={data}\n      block={block}\n    />\n  );\n};\n\nSliderData.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n};\n\nexport default SliderData;\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC;AAAY;AAArB,OAAuD,sBAAvD;AAEA,SAASC,YAAT,QAA6B,UAA7B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAChCC,MAAM,CAACC,MAAP,CAAc,CAAC,GAAGJ,KAAJ,CAAd,EAA0B;EAAE,CAACC,KAAD,GAASC;AAAX,CAA1B,CADK;;AAGP,MAAMG,UAAU,GAAIC,KAAD,IAAW;EAC5B,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC;EAAf,IAAiCH,KAAvC;EACA,MAAMI,IAAI,GAAGhB,OAAO,EAApB;EACA,MAAM;IAAEiB;EAAF,IAAaL,KAAK,CAACE,IAAzB;EACA,MAAMI,QAAQ,GAAGf,WAAW,CAACc,MAAD,CAA5B;EACA,MAAME,MAAM,GAAGf,YAAY,iCAAMQ,KAAN;IAAaI;EAAb,GAA3B;EAEAlB,KAAK,CAACsB,SAAN,CAAgB,MAAM;IACpB,IAAIF,QAAJ,EAAc;MAAA;;MACZ,MAAMG,IAAI,GAAGnB,UAAU,CAACe,MAAD,EAASC,QAAT,CAAvB;MACA,MAAMX,KAAK,GAAGc,IAAI,CAACC,SAAL,CAAgBC,GAAD,IAASA,GAAxB,CAAd;;MACA,mBAAIF,IAAI,CAACd,KAAD,CAAR,4DAAI,YAAaiB,IAAjB,6CAAI,iBAAoB,CAApB,CAAJ,EAA4B;QAC1BT,aAAa,CAACF,KAAD,kCACRC,IADQ;UAEXG,MAAM,EAAEZ,kBAAkB,CAACS,IAAI,CAACG,MAAN,EAAcV,KAAd,kCACrBO,IAAI,CAACG,MAAL,CAAYV,KAAZ,CADqB;YAExBkB,KAAK,EAAEJ,IAAI,CAACd,KAAD,CAAJ,CAAYiB,IAAZ,CAAiB,CAAjB,EAAoBC,KAFH;YAGxBC,WAAW,EAAEL,IAAI,CAACd,KAAD,CAAJ,CAAYiB,IAAZ,CAAiB,CAAjB,EAAoBG,WAHT;YAIxBC,UAAU,EAAEP,IAAI,CAACd,KAAD,CAAJ,CAAYiB,IAAZ,CAAiB,CAAjB,EAAoBI;UAJR;QAFf,GAAb;MASD;IACF;IACD;;EACD,CAjBD,EAiBG,CAACX,MAAD,CAjBH;EAmBA,OACE,MAAC,aAAD;IACE,MAAM,EAAEE,MADV;IAEE,KAAK,EAAEA,MAAM,CAACM,KAFhB;IAGE,aAAa,EAAE,CAACI,EAAD,EAAKrB,KAAL,KAAe;MAC5BO,aAAa,CAACF,KAAD,kCACRC,IADQ;QAEX,CAACe,EAAD,GAAMrB;MAFK,GAAb;IAID,CARH;IASE,QAAQ,EAAEM,IATZ;IAUE,KAAK,EAAED,KAVT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF;AAcD,CAxCD;;AA0CAF,UAAU,CAACmB,SAAX,GAAuB;EACrBhB,IAAI,EAAEf,SAAS,CAACgC,QAAV,CAAmBhC,SAAS,CAACiC,GAA7B,EAAkCC,UADnB;EAErBpB,KAAK,EAAEd,SAAS,CAACmC,MAAV,CAAiBD,UAFH;EAGrBlB,aAAa,EAAEhB,SAAS,CAACoC,IAAV,CAAeF;AAHT,CAAvB;AAMA,eAAetB,UAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}