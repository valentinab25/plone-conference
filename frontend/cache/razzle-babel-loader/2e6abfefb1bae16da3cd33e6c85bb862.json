{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * EmailWidget component.\n * @module components/manage/Widgets/EmailWidget\n */\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport React from 'react';\nimport { Input } from 'semantic-ui-react';\n/** EmailWidget, a widget for email addresses\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Email\",\n *  widget: 'email',\n * }\n * ```\n */\n\nconst EmailWidget = props => {\n  const {\n    id,\n    value,\n    onChange,\n    onBlur,\n    onClick,\n    minLength,\n    maxLength,\n    placeholder,\n    isDisabled\n  } = props;\n  const inputId = `field-${id}`;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"email\"\n  }), __jsx(Input, {\n    id: inputId,\n    name: id,\n    type: \"email\",\n    value: value || '',\n    disabled: isDisabled,\n    placeholder: placeholder,\n    onChange: ({\n      target\n    }) => onChange(id, target.value === '' ? undefined : target.value),\n    onBlur: ({\n      target\n    }) => onBlur(id, target.value === '' ? undefined : target.value),\n    onClick: () => onClick(),\n    minLength: minLength || null,\n    maxLength: maxLength || null\n  }));\n};\n/**\n * Property types\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nEmailWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  minLength: null,\n  maxLength: null\n};\nexport default EmailWidget;","map":{"version":3,"names":["FormFieldWrapper","React","Input","EmailWidget","props","id","value","onChange","onBlur","onClick","minLength","maxLength","placeholder","isDisabled","inputId","target","undefined","defaultProps","description","required","error"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Widgets/EmailWidget.jsx"],"sourcesContent":["/**\n * EmailWidget component.\n * @module components/manage/Widgets/EmailWidget\n */\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Input } from 'semantic-ui-react';\n\n/** EmailWidget, a widget for email addresses\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Email\",\n *  widget: 'email',\n * }\n * ```\n */\nconst EmailWidget = (props) => {\n  const {\n    id,\n    value,\n    onChange,\n    onBlur,\n    onClick,\n    minLength,\n    maxLength,\n    placeholder,\n    isDisabled,\n  } = props;\n  const inputId = `field-${id}`;\n\n  return (\n    <FormFieldWrapper {...props} className=\"email\">\n      <Input\n        id={inputId}\n        name={id}\n        type=\"email\"\n        value={value || ''}\n        disabled={isDisabled}\n        placeholder={placeholder}\n        onChange={({ target }) =>\n          onChange(id, target.value === '' ? undefined : target.value)\n        }\n        onBlur={({ target }) =>\n          onBlur(id, target.value === '' ? undefined : target.value)\n        }\n        onClick={() => onClick()}\n        minLength={minLength || null}\n        maxLength={maxLength || null}\n      />\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types\n * @property {Object} propTypes Property types.\n * @static\n */\nEmailWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  minLength: PropTypes.number,\n  maxLength: PropTypes.number,\n  placeholder: PropTypes.string,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nEmailWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  minLength: null,\n  maxLength: null,\n};\n\nexport default EmailWidget;\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA,SAASA,gBAAT,QAAiC,yBAAjC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAC7B,MAAM;IACJC,EADI;IAEJC,KAFI;IAGJC,QAHI;IAIJC,MAJI;IAKJC,OALI;IAMJC,SANI;IAOJC,SAPI;IAQJC,WARI;IASJC;EATI,IAUFT,KAVJ;EAWA,MAAMU,OAAO,GAAI,SAAQT,EAAG,EAA5B;EAEA,OACE,MAAC,gBAAD,eAAsBD,KAAtB;IAA6B,SAAS,EAAC;EAAvC,IACE,MAAC,KAAD;IACE,EAAE,EAAEU,OADN;IAEE,IAAI,EAAET,EAFR;IAGE,IAAI,EAAC,OAHP;IAIE,KAAK,EAAEC,KAAK,IAAI,EAJlB;IAKE,QAAQ,EAAEO,UALZ;IAME,WAAW,EAAED,WANf;IAOE,QAAQ,EAAE,CAAC;MAAEG;IAAF,CAAD,KACRR,QAAQ,CAACF,EAAD,EAAKU,MAAM,CAACT,KAAP,KAAiB,EAAjB,GAAsBU,SAAtB,GAAkCD,MAAM,CAACT,KAA9C,CARZ;IAUE,MAAM,EAAE,CAAC;MAAES;IAAF,CAAD,KACNP,MAAM,CAACH,EAAD,EAAKU,MAAM,CAACT,KAAP,KAAiB,EAAjB,GAAsBU,SAAtB,GAAkCD,MAAM,CAACT,KAA9C,CAXV;IAaE,OAAO,EAAE,MAAMG,OAAO,EAbxB;IAcE,SAAS,EAAEC,SAAS,IAAI,IAd1B;IAeE,SAAS,EAAEC,SAAS,IAAI;EAf1B,EADF,CADF;AAqBD,CAnCD;AAqCA;AACA;AACA;AACA;AACA;;;AAgBA;AACA;AACA;AACA;AACA;AACAR,WAAW,CAACc,YAAZ,GAA2B;EACzBC,WAAW,EAAE,IADY;EAEzBC,QAAQ,EAAE,KAFe;EAGzBC,KAAK,EAAE,EAHkB;EAIzBd,KAAK,EAAE,IAJkB;EAKzBC,QAAQ,EAAE,MAAM,CAAE,CALO;EAMzBC,MAAM,EAAE,MAAM,CAAE,CANS;EAOzBC,OAAO,EAAE,MAAM,CAAE,CAPQ;EAQzBC,SAAS,EAAE,IARc;EASzBC,SAAS,EAAE;AATc,CAA3B;AAYA,eAAeR,WAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}