{"ast":null,"code":"import _extends from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Grid/Edit.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Button, Grid, Ref } from 'semantic-ui-react';\nimport { injectIntl } from 'react-intl';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuid } from 'uuid';\nimport cx from 'classnames';\nimport { withRouter } from 'react-router-dom';\nimport { Icon, SidebarPortal } from '@plone/volto/components';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport configSVG from '@plone/volto/icons/configuration.svg';\nimport { BlockRenderer, TemplateChooser } from '../../components';\nimport NewBlockAddButton from './NewBlockAddButton';\nimport GridData from './Data';\nimport { reorderArray, replaceItemOfArray } from '../../helpers';\nimport { getAllowedBlocks } from '../utils';\nimport templates from './templates';\nimport config from '@plone/volto/registry';\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\n\nclass EditGrid extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      selectedColumnIndex: 0,\n      droppableId: uuid()\n    });\n\n    _defineProperty(this, \"onChangeGridItem\", (index, gridItemData) => {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: replaceItemOfArray(this.props.data.columns, index, _objectSpread(_objectSpread({}, this.props.data.columns[index]), gridItemData))\n      }));\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        source,\n        destination\n      } = result; // dropped outside the list\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const columns = reorderArray(this.props.data.columns, source.index, destination.index);\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns\n      }));\n      this.onChangeSelectedColumnItem(destination.index);\n    });\n\n    _defineProperty(this, \"addNewColumn\", e => {\n      var _getAllowedBlocks;\n\n      e.stopPropagation();\n      var maxNumberOfColumns = config.blocks.blocksConfig.__grid.maxNumberOfColumns > 16 ? 16 : config.blocks.blocksConfig.__grid.maxNumberOfColumns;\n      const type = ((_getAllowedBlocks = getAllowedBlocks(this.props.data['@type'])) === null || _getAllowedBlocks === void 0 ? void 0 : _getAllowedBlocks.length) === 1 ? getAllowedBlocks(this.props.data['@type'])[0] : null;\n      const newColumnsState = [...this.props.data.columns, _objectSpread({\n        id: uuid()\n      }, type && {\n        '@type': type\n      })];\n\n      if (this.props.data.columns.length < maxNumberOfColumns) {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          columns: newColumnsState\n        }));\n      }\n    });\n\n    _defineProperty(this, \"removeColumn\", (e, index) => {\n      e.stopPropagation();\n      const newColumnsState = this.props.data.columns.filter((item, i) => i !== index);\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: newColumnsState\n      }));\n    });\n\n    _defineProperty(this, \"clearColumn\", (e, index) => {\n      e.stopPropagation();\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: replaceItemOfArray(this.props.data.columns, index, _objectSpread(_objectSpread({}, this.props.data.columns[index]), {}, {\n          url: ''\n        }))\n      }));\n    });\n\n    _defineProperty(this, \"onChangeColumnSettings\", (e, index, key, value) => {\n      e.stopPropagation();\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: replaceItemOfArray(this.props.data.columns, index, _objectSpread(_objectSpread({}, this.props.data.columns[index]), {}, {\n          [key]: value\n        }))\n      }));\n    });\n\n    _defineProperty(this, \"onSelectTemplate\", templateIndex => {\n      var _getAllowedBlocks2;\n\n      const resultantTemplates = ((_getAllowedBlocks2 = getAllowedBlocks(this.props.data['@type'])) === null || _getAllowedBlocks2 === void 0 ? void 0 : _getAllowedBlocks2.length) === 1 ? templates(getAllowedBlocks(this.props.data['@type'])[0]) : templates();\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: resultantTemplates(this.props.intl)[templateIndex].columns\n      }));\n    });\n\n    _defineProperty(this, \"onChangeSelectedColumnItem\", index => this.setState({\n      selectedColumnIndex: index\n    }));\n\n    _defineProperty(this, \"node\", /*#__PURE__*/React.createRef());\n\n    this.onChangeBlock = this.onChangeBlock.bind(this); // sets defaults\n\n    if (!this.props.data.columns) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        columns: []\n      }));\n    }\n  }\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      align\n    }));\n  }\n\n  /**\n   * Change inner blocks handler\n   * @method onChangeBlock\n   * @param {object} editorState Editor state.\n   * @param {number} index Editor card index\n   * @returns {undefined}\n   */\n  onChangeBlock(data, index) {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      columns: replaceItemOfArray(this.props.data.columns, index, _objectSpread(_objectSpread({}, this.props.data.columns[index]), data))\n    }));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$data$colu, _getAllowedBlocks3;\n\n    const {\n      data\n    } = this.props;\n    const blocksConfig = config.blocks.blocksConfig.__grid.blocksConfig || this.props.blocksConfig;\n    return __jsx(React.Fragment, null, this.props.selected && __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `Add grid element`,\n      icon: true,\n      basic: true,\n      onClick: e => this.addNewColumn(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }))), __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `Select grid block`,\n      icon: true,\n      basic: true,\n      onClick: e => {\n        e.stopPropagation();\n        this.setState({\n          selectedColumnIndex: null\n        });\n        this.node.current.focus();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: configSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    })))), __jsx(\"div\", {\n      className: cx({\n        [data['@type']]: true,\n        one: (data === null || data === void 0 ? void 0 : data.columns) && data.columns.length === 1,\n        two: (data === null || data === void 0 ? void 0 : data.columns) && data.columns.length === 2,\n        three: (data === null || data === void 0 ? void 0 : data.columns) && data.columns.length === 3,\n        four: (data === null || data === void 0 ? void 0 : data.columns) && data.columns.length === 4\n      }) // This is required to enabling a small \"in-between\" clickable area\n      // for bringing the Grid sidebar alive once you have selected an inner block\n      ,\n      onClick: e => {\n        this.setState({\n          selectedColumnIndex: null\n        });\n        this.node.current.focus();\n      } // Custom own focus management\n      ,\n      onKeyDown: e => {\n        if (e.key === 'Enter') {\n          this.props.onAddBlock(config.settings.defaultBlockType, this.props.index + 1);\n        }\n\n        if (e.key === 'ArrowUp') {\n          this.props.onFocusPreviousBlock(this.props.id, this.props.blockNode.current);\n          e.preventDefault();\n        }\n\n        if (e.key === 'ArrowDown') {\n          this.props.onFocusNextBlock(this.props.id, this.props.blockNode.current);\n          e.preventDefault();\n        }\n      },\n      ref: this.node,\n      role: \"presentation\",\n      style: {\n        outline: 'none'\n      } // The tabIndex is required for the keyboard navigation and for making the element interactive\n\n      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n      ,\n      tabIndex: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }\n    }, this.props.data.columns && this.props.data.headline && __jsx(\"h2\", {\n      className: \"headline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, data.headline), !((_this$props$data$colu = this.props.data.columns) !== null && _this$props$data$colu !== void 0 && _this$props$data$colu.length) && __jsx(TemplateChooser, {\n      templates: ((_getAllowedBlocks3 = getAllowedBlocks(this.props.data['@type'])) === null || _getAllowedBlocks3 === void 0 ? void 0 : _getAllowedBlocks3.length) === 1 ? templates(getAllowedBlocks(this.props.data['@type'])[0]) : templates(),\n      onSelectTemplate: this.onSelectTemplate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }), __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }\n    }, __jsx(Droppable, {\n      droppableId: this.state.droppableId,\n      direction: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, provided => __jsx(Ref, {\n      innerRef: provided.innerRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, _extends({\n      stackable: true,\n      stretched: true\n    }, provided.droppableProps, {\n      columns: this.props.data.columns ? this.props.data.columns.length : 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 19\n      }\n    }), this.props.data.columns && this.props.data.columns.map((item, index) => __jsx(Draggable, {\n      draggableId: item.id,\n      index: index,\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 25\n      }\n    }, provided => {\n      item = _objectSpread(_objectSpread({}, item), {}, {\n        block: item.id\n      });\n      return __jsx(Ref, {\n        innerRef: provided.innerRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 31\n        }\n      }, __jsx(Grid.Column, _extends({\n        className: `grid-block-${item['@type']}`,\n        key: item.id\n      }, provided.draggableProps, provided.dragHandleProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 33\n        }\n      }), __jsx(\"div\", {\n        className: cx('renderer-wrapper', {\n          empty: !item['@type'],\n          selected: this.props.selected && this.state.selectedColumnIndex === index\n        }),\n        role: \"presentation\" // This prevents propagation of ENTER\n        ,\n        onKeyDown: e => e.stopPropagation(),\n        onClick: e => {\n          e.stopPropagation();\n          this.props.onSelectBlock(this.props.block);\n          this.onChangeSelectedColumnItem(index);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 35\n        }\n      }, __jsx(Button, {\n        \"aria-label\": `Remove grid element ${index}`,\n        basic: true,\n        icon: true,\n        onClick: e => this.removeColumn(e, index),\n        className: \"remove-block-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 37\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 39\n        }\n      })), item['@type'] ? __jsx(BlockRenderer, _extends({}, this.props, {\n        block: item.id,\n        edit: true,\n        type: item['@type'],\n        selected: this.props.selected && this.state.selectedColumnIndex === index,\n        onChangeBlock: (block, data) => {\n          this.onChangeGridItem(index, data);\n        },\n        data: this.props.data.columns[index],\n        blocksConfig: blocksConfig,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 39\n        }\n      })) : __jsx(\"div\", {\n        className: \"uber-grid-default-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 39\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 41\n        }\n      }, \"Add a new block\"), __jsx(NewBlockAddButton, {\n        block: this.props.blocks,\n        index: index,\n        onChangeGridItem: this.onChangeGridItem,\n        allowedBlocks: getAllowedBlocks(this.props.data['@type']),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 41\n        }\n      })))));\n    })), provided.placeholder)))), __jsx(SidebarPortal, {\n      selected: this.props.selected && !this.state.selectedColumnIndex && this.state.selectedColumnIndex !== 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }\n    }, __jsx(GridData, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n}\n\n_defineProperty(EditGrid, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  content: PropTypes.objectOf(PropTypes.any).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\n\nexport default compose(injectIntl, withRouter, withBlockExtensions, connect(state => ({\n  request: state.content.create,\n  content: state.content.data\n}), {}))(EditGrid);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Button","Grid","Ref","injectIntl","DragDropContext","Draggable","Droppable","v4","uuid","cx","withRouter","Icon","SidebarPortal","withBlockExtensions","addSVG","clearSVG","configSVG","BlockRenderer","TemplateChooser","NewBlockAddButton","GridData","reorderArray","replaceItemOfArray","getAllowedBlocks","templates","config","EditGrid","constructor","props","selectedColumnIndex","droppableId","index","gridItemData","onChangeBlock","block","data","columns","result","source","destination","onChangeSelectedColumnItem","e","stopPropagation","maxNumberOfColumns","blocks","blocksConfig","__grid","type","length","newColumnsState","id","filter","item","i","url","key","value","templateIndex","resultantTemplates","intl","setState","createRef","bind","onAlignBlock","align","render","selected","addNewColumn","node","current","focus","one","two","three","four","onAddBlock","settings","defaultBlockType","onFocusPreviousBlock","blockNode","preventDefault","onFocusNextBlock","outline","headline","onSelectTemplate","onDragEnd","state","provided","innerRef","droppableProps","map","draggableProps","dragHandleProps","empty","onSelectBlock","removeColumn","onChangeGridItem","placeholder","bool","isRequired","string","number","objectOf","any","content","request","shape","loading","loaded","pathname","func","onDeleteBlock","handleKeyDown","create"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@kitconcept/volto-blocks-grid/src/components/Grid/Edit.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Button, Grid, Ref } from 'semantic-ui-react';\nimport { injectIntl } from 'react-intl';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuid } from 'uuid';\nimport cx from 'classnames';\nimport { withRouter } from 'react-router-dom';\nimport { Icon, SidebarPortal } from '@plone/volto/components';\nimport { withBlockExtensions } from '@plone/volto/helpers';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport configSVG from '@plone/volto/icons/configuration.svg';\n\nimport { BlockRenderer, TemplateChooser } from '../../components';\nimport NewBlockAddButton from './NewBlockAddButton';\nimport GridData from './Data';\n\nimport { reorderArray, replaceItemOfArray } from '../../helpers';\n\nimport { getAllowedBlocks } from '../utils';\nimport templates from './templates';\n\nimport config from '@plone/volto/registry';\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass EditGrid extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedColumnIndex: 0,\n    droppableId: uuid(),\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onChangeBlock = this.onChangeBlock.bind(this);\n\n    // sets defaults\n    if (!this.props.data.columns) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        columns: [],\n      });\n    }\n  }\n\n  onChangeGridItem = (index, gridItemData) => {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: replaceItemOfArray(this.props.data.columns, index, {\n        ...this.props.data.columns[index],\n        ...gridItemData,\n      }),\n    });\n  };\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  onDragEnd = (result) => {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const columns = reorderArray(\n      this.props.data.columns,\n      source.index,\n      destination.index,\n    );\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns,\n    });\n\n    this.onChangeSelectedColumnItem(destination.index);\n  };\n\n  /**\n   * Change inner blocks handler\n   * @method onChangeBlock\n   * @param {object} editorState Editor state.\n   * @param {number} index Editor card index\n   * @returns {undefined}\n   */\n  onChangeBlock(data, index) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: replaceItemOfArray(this.props.data.columns, index, {\n        ...this.props.data.columns[index],\n        ...data,\n      }),\n    });\n  }\n\n  addNewColumn = (e) => {\n    e.stopPropagation();\n    var maxNumberOfColumns =\n      config.blocks.blocksConfig.__grid.maxNumberOfColumns > 16\n        ? 16\n        : config.blocks.blocksConfig.__grid.maxNumberOfColumns;\n    const type =\n      getAllowedBlocks(this.props.data['@type'])?.length === 1\n        ? getAllowedBlocks(this.props.data['@type'])[0]\n        : null;\n    const newColumnsState = [\n      ...this.props.data.columns,\n      {\n        id: uuid(),\n        ...(type && { '@type': type }),\n      },\n    ];\n    if (this.props.data.columns.length < maxNumberOfColumns) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        columns: newColumnsState,\n      });\n    }\n  };\n\n  removeColumn = (e, index) => {\n    e.stopPropagation();\n    const newColumnsState = this.props.data.columns.filter(\n      (item, i) => i !== index,\n    );\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: newColumnsState,\n    });\n  };\n\n  clearColumn = (e, index) => {\n    e.stopPropagation();\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: replaceItemOfArray(this.props.data.columns, index, {\n        ...this.props.data.columns[index],\n        url: '',\n      }),\n    });\n  };\n\n  onChangeColumnSettings = (e, index, key, value) => {\n    e.stopPropagation();\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: replaceItemOfArray(this.props.data.columns, index, {\n        ...this.props.data.columns[index],\n        [key]: value,\n      }),\n    });\n  };\n\n  onSelectTemplate = (templateIndex) => {\n    const resultantTemplates =\n      getAllowedBlocks(this.props.data['@type'])?.length === 1\n        ? templates(getAllowedBlocks(this.props.data['@type'])[0])\n        : templates();\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      columns: resultantTemplates(this.props.intl)[templateIndex].columns,\n    });\n  };\n\n  onChangeSelectedColumnItem = (index) =>\n    this.setState({ selectedColumnIndex: index });\n\n  node = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data } = this.props;\n\n    const blocksConfig =\n      config.blocks.blocksConfig.__grid.blocksConfig || this.props.blocksConfig;\n\n    return (\n      <>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                aria-label={`Add grid element`}\n                icon\n                basic\n                onClick={(e) => this.addNewColumn(e)}\n              >\n                <Icon name={addSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                aria-label={`Select grid block`}\n                icon\n                basic\n                onClick={(e) => {\n                  e.stopPropagation();\n                  this.setState({ selectedColumnIndex: null });\n                  this.node.current.focus();\n                }}\n              >\n                <Icon name={configSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        <div\n          className={cx({\n            [data['@type']]: true,\n            one: data?.columns && data.columns.length === 1,\n            two: data?.columns && data.columns.length === 2,\n            three: data?.columns && data.columns.length === 3,\n            four: data?.columns && data.columns.length === 4,\n          })}\n          // This is required to enabling a small \"in-between\" clickable area\n          // for bringing the Grid sidebar alive once you have selected an inner block\n          onClick={(e) => {\n            this.setState({ selectedColumnIndex: null });\n            this.node.current.focus();\n          }}\n          // Custom own focus management\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              this.props.onAddBlock(\n                config.settings.defaultBlockType,\n                this.props.index + 1,\n              );\n            }\n            if (e.key === 'ArrowUp') {\n              this.props.onFocusPreviousBlock(\n                this.props.id,\n                this.props.blockNode.current,\n              );\n              e.preventDefault();\n            }\n            if (e.key === 'ArrowDown') {\n              this.props.onFocusNextBlock(\n                this.props.id,\n                this.props.blockNode.current,\n              );\n              e.preventDefault();\n            }\n          }}\n          ref={this.node}\n          role=\"presentation\"\n          style={{ outline: 'none' }}\n          // The tabIndex is required for the keyboard navigation and for making the element interactive\n          /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n          tabIndex=\"0\"\n        >\n          {this.props.data.columns && this.props.data.headline && (\n            <h2 className=\"headline\">{data.headline}</h2>\n          )}\n\n          {!this.props.data.columns?.length && (\n            <TemplateChooser\n              templates={\n                getAllowedBlocks(this.props.data['@type'])?.length === 1\n                  ? templates(getAllowedBlocks(this.props.data['@type'])[0])\n                  : templates()\n              }\n              onSelectTemplate={this.onSelectTemplate}\n            />\n          )}\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable\n              droppableId={this.state.droppableId}\n              direction=\"horizontal\"\n            >\n              {(provided) => (\n                <Ref innerRef={provided.innerRef}>\n                  <Grid\n                    stackable\n                    stretched\n                    {...provided.droppableProps}\n                    columns={\n                      this.props.data.columns\n                        ? this.props.data.columns.length\n                        : 0\n                    }\n                  >\n                    {this.props.data.columns &&\n                      this.props.data.columns.map((item, index) => (\n                        <Draggable\n                          draggableId={item.id}\n                          index={index}\n                          key={item.id}\n                        >\n                          {(provided) => {\n                            item = { ...item, block: item.id };\n                            return (\n                              <Ref innerRef={provided.innerRef}>\n                                <Grid.Column\n                                  className={`grid-block-${item['@type']}`}\n                                  key={item.id}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  <div\n                                    className={cx('renderer-wrapper', {\n                                      empty: !item['@type'],\n                                      selected:\n                                        this.props.selected &&\n                                        this.state.selectedColumnIndex ===\n                                          index,\n                                    })}\n                                    role=\"presentation\"\n                                    // This prevents propagation of ENTER\n                                    onKeyDown={(e) => e.stopPropagation()}\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      this.props.onSelectBlock(\n                                        this.props.block,\n                                      );\n                                      this.onChangeSelectedColumnItem(index);\n                                    }}\n                                  >\n                                    <Button\n                                      aria-label={`Remove grid element ${index}`}\n                                      basic\n                                      icon\n                                      onClick={(e) =>\n                                        this.removeColumn(e, index)\n                                      }\n                                      className=\"remove-block-button\"\n                                    >\n                                      <Icon\n                                        name={clearSVG}\n                                        className=\"circled\"\n                                        size=\"24px\"\n                                      />\n                                    </Button>\n                                    {item['@type'] ? (\n                                      <BlockRenderer\n                                        {...this.props}\n                                        block={item.id}\n                                        edit\n                                        type={item['@type']}\n                                        selected={\n                                          this.props.selected &&\n                                          this.state.selectedColumnIndex ===\n                                            index\n                                        }\n                                        onChangeBlock={(block, data) => {\n                                          this.onChangeGridItem(index, data);\n                                        }}\n                                        data={this.props.data.columns[index]}\n                                        blocksConfig={blocksConfig}\n                                      />\n                                    ) : (\n                                      <div className=\"uber-grid-default-item\">\n                                        <p>Add a new block</p>\n                                        <NewBlockAddButton\n                                          block={this.props.blocks}\n                                          index={index}\n                                          onChangeGridItem={\n                                            this.onChangeGridItem\n                                          }\n                                          allowedBlocks={getAllowedBlocks(\n                                            this.props.data['@type'],\n                                          )}\n                                        />\n                                      </div>\n                                    )}\n                                  </div>\n                                </Grid.Column>\n                              </Ref>\n                            );\n                          }}\n                        </Draggable>\n                      ))}\n                    {provided.placeholder}\n                  </Grid>\n                </Ref>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <SidebarPortal\n            selected={\n              this.props.selected &&\n              !this.state.selectedColumnIndex &&\n              this.state.selectedColumnIndex !== 0\n            }\n          >\n            <GridData {...this.props}></GridData>\n          </SidebarPortal>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  withRouter,\n  withBlockExtensions,\n  connect(\n    (state) => ({\n      request: state.content.create,\n      content: state.content.data,\n    }),\n    {},\n  ),\n)(EditGrid);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}