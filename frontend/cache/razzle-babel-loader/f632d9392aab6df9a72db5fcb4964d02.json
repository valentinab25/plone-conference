{"ast":null,"code":"import _defineProperty from \"/home/valentina/Plone/plone-conference/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar __jsx = React.createElement;\n\n/**\n * Contents upload modal.\n * @module components/manage/Contents/ContentsUploadModal\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Button, Dimmer, Header, Icon, Image, Loader, Modal, Table, Segment } from 'semantic-ui-react';\nimport loadable from '@loadable/component';\nimport filesize from 'filesize';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { FormattedRelativeDate } from '@plone/volto/components';\nimport { createContent } from '@plone/volto/actions';\nconst Dropzone = loadable({\n  resolved: {},\n\n  chunkName() {\n    return \"react-dropzone\";\n  },\n\n  isReady(props) {\n    const key = this.resolve(props);\n\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n\n    return false;\n  },\n\n  importAsync: () => import(\n  /* webpackChunkName: \"react-dropzone\" */\n  'react-dropzone'),\n\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n\n  requireSync(props) {\n    const id = this.resolve(props);\n\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n\n    return eval('module.require')(id);\n  },\n\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-dropzone\");\n    }\n\n    return eval('require.resolve')(\"react-dropzone\");\n  }\n\n});\nconst messages = defineMessages({\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  upload: {\n    \"id\": \"{count, plural, one {Upload {count} file} other {Upload {count} files}}\",\n    \"defaultMessage\": \"{count, plural, one {Upload {count} file} other {Upload {count} files}}\"\n  }\n});\nconst SUBREQUEST = 'batch-upload';\n/**\n * ContentsUploadModal class.\n * @class ContentsUploadModal\n * @extends Component\n */\n\nclass ContentsUploadModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onDrop\", async files => {\n      for (let i = 0; i < files.length; i++) {\n        await readAsDataURL(files[i]).then(data => {\n          const fields = data.match(/^data:(.*);(.*),(.*)$/);\n          files[i].preview = fields[0];\n        });\n      }\n\n      this.setState({\n        files: _concat(this.state.files, files)\n      });\n    });\n\n    this.onRemoveFile = this.onRemoveFile.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      files: []\n    };\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n      this.setState({\n        files: []\n      });\n    }\n  }\n  /**\n   * Remove file handler\n   * @method onRemoveFile\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n\n\n  onRemoveFile(event) {\n    this.setState({\n      files: _filter(this.state.files, (file, index) => index !== parseInt(event.target.getAttribute('value'), 10))\n    });\n  }\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.onCancel();\n    this.setState({\n      files: []\n    });\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n\n\n  onSubmit() {\n    Promise.all(_map(this.state.files, file => readAsDataURL(file))).then(files => {\n      this.props.createContent(this.props.pathname, _map(this.state.files, (file, index) => {\n        const fields = files[index].match(/^data:(.*);(.*),(.*)$/);\n        const image = fields[1].split('/')[0] === 'image';\n        return {\n          '@type': image ? 'Image' : 'File',\n          title: file.name,\n          [image ? 'image' : 'file']: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name\n          }\n        };\n      }), SUBREQUEST);\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return this.props.open && __jsx(Modal, {\n      open: this.props.open\n    }, __jsx(Header, null, __jsx(FormattedMessage, {\n      id: \"Upload files\",\n      defaultMessage: \"Upload files\"\n    })), __jsx(Dimmer, {\n      active: this.props.request.loading\n    }, __jsx(Loader, null, __jsx(FormattedMessage, {\n      id: \"Uploading files\",\n      defaultMessage: \"Uploading files\"\n    }))), __jsx(Modal.Content, null, __jsx(Dropzone, {\n      onDrop: this.onDrop,\n      className: \"dropzone\",\n      noDragEventsBubbling: true,\n      multiple: true\n    }, _ref => {\n      let {\n        getRootProps,\n        getInputProps\n      } = _ref;\n      return __jsx(\"div\", getRootProps({\n        className: 'dashed'\n      }), __jsx(Segment, null, __jsx(Table, {\n        basic: \"very\"\n      }, __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, null, __jsx(FormattedMessage, {\n        id: \"Drag and drop files from your computer onto this area or click the \\u201CBrowse\\u201D button.\",\n        defaultMessage: \"Drag and drop files from your computer onto this area or click the \\u201CBrowse\\u201D button.\"\n      })), __jsx(Table.Cell, null, __jsx(Button, {\n        className: \"ui button primary\"\n      }, __jsx(FormattedMessage, {\n        id: \"Browse\",\n        defaultMessage: \"Browse\"\n      })), __jsx(\"input\", getInputProps({\n        type: 'file',\n        style: {\n          display: 'none'\n        }\n      }))))))));\n    }), this.state.files.length > 0 && __jsx(Table, {\n      compact: true,\n      singleLine: true\n    }, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, {\n      width: 8\n    }, __jsx(FormattedMessage, {\n      id: \"Filename\",\n      defaultMessage: \"Filename\"\n    })), __jsx(Table.HeaderCell, {\n      width: 4\n    }, __jsx(FormattedMessage, {\n      id: \"Last modified\",\n      defaultMessage: \"Last modified\"\n    })), __jsx(Table.HeaderCell, {\n      width: 4\n    }, __jsx(FormattedMessage, {\n      id: \"File size\",\n      defaultMessage: \"File size\"\n    })), __jsx(Table.HeaderCell, {\n      width: 4\n    }, __jsx(FormattedMessage, {\n      id: \"Preview\",\n      defaultMessage: \"Preview\"\n    })), __jsx(Table.HeaderCell, null))), __jsx(Table.Body, null, _map(this.state.files, (file, index) => __jsx(Table.Row, {\n      className: \"upload-row\",\n      key: file.name\n    }, __jsx(Table.Cell, null, file.name), __jsx(Table.Cell, null, file.lastModifiedDate && __jsx(FormattedRelativeDate, {\n      date: file.lastModifiedDate\n    })), __jsx(Table.Cell, null, filesize(file.size, {\n      round: 0\n    })), __jsx(Table.Cell, null, file.type.split('/')[0] === 'image' && __jsx(Image, {\n      src: file.preview,\n      height: 60\n    })), __jsx(Table.Cell, null, __jsx(Icon, {\n      name: \"close\",\n      value: index,\n      link: true,\n      onClick: this.onRemoveFile\n    }))))))), __jsx(Modal.Actions, null, this.state.files.length > 0 && __jsx(Button, {\n      basic: true,\n      circular: true,\n      primary: true,\n      floated: \"right\",\n      icon: \"arrow right\",\n      \"aria-label\": this.props.intl.formatMessage(messages.upload, {\n        count: this.state.files.length\n      }),\n      onClick: this.onSubmit,\n      title: this.props.intl.formatMessage(messages.upload, {\n        count: this.state.files.length\n      }),\n      size: \"big\"\n    }), __jsx(Button, {\n      basic: true,\n      circular: true,\n      secondary: true,\n      icon: \"remove\",\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      size: \"big\",\n      onClick: this.onCancel\n    })));\n  }\n\n}\n\nexport default compose(injectIntl, connect(state => {\n  var _state$content$subreq;\n\n  return {\n    request: ((_state$content$subreq = state.content.subrequests) === null || _state$content$subreq === void 0 ? void 0 : _state$content$subreq[SUBREQUEST]) || {}\n  };\n}, {\n  createContent\n}))(ContentsUploadModal);","map":{"version":3,"names":["React","Component","connect","compose","Button","Dimmer","Header","Icon","Image","Loader","Modal","Table","Segment","loadable","filesize","readAsDataURL","FormattedMessage","defineMessages","injectIntl","FormattedRelativeDate","createContent","Dropzone","messages","cancel","upload","SUBREQUEST","ContentsUploadModal","constructor","props","files","i","length","then","data","fields","match","preview","setState","state","onRemoveFile","bind","onDrop","onCancel","onSubmit","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","event","file","index","parseInt","target","getAttribute","Promise","all","pathname","image","split","title","name","encoding","filename","render","open","getRootProps","getInputProps","className","type","style","display","lastModifiedDate","size","round","intl","formatMessage","count","content","subrequests"],"sources":["/home/valentina/Plone/plone-conference/frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsUploadModal.jsx"],"sourcesContent":["/**\n * Contents upload modal.\n * @module components/manage/Contents/ContentsUploadModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {\n  Button,\n  Dimmer,\n  Header,\n  Icon,\n  Image,\n  Loader,\n  Modal,\n  Table,\n  Segment,\n} from 'semantic-ui-react';\nimport loadable from '@loadable/component';\nimport { concat, filter, map } from 'lodash';\nimport filesize from 'filesize';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { FormattedRelativeDate } from '@plone/volto/components';\nimport { createContent } from '@plone/volto/actions';\n\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  upload: {\n    id:\n      '{count, plural, one {Upload {count} file} other {Upload {count} files}}',\n    defaultMessage:\n      '{count, plural, one {Upload {count} file} other {Upload {count} files}}',\n  },\n});\n\nconst SUBREQUEST = 'batch-upload';\n\n/**\n * ContentsUploadModal class.\n * @class ContentsUploadModal\n * @extends Component\n */\nclass ContentsUploadModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onRemoveFile = this.onRemoveFile.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      files: [],\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n      this.setState({\n        files: [],\n      });\n    }\n  }\n\n  /**\n   * Remove file handler\n   * @method onRemoveFile\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onRemoveFile(event) {\n    this.setState({\n      files: filter(\n        this.state.files,\n        (file, index) =>\n          index !== parseInt(event.target.getAttribute('value'), 10),\n      ),\n    });\n  }\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  onDrop = async (files) => {\n    for (let i = 0; i < files.length; i++) {\n      await readAsDataURL(files[i]).then((data) => {\n        const fields = data.match(/^data:(.*);(.*),(.*)$/);\n        files[i].preview = fields[0];\n      });\n    }\n    this.setState({\n      files: concat(this.state.files, files),\n    });\n  };\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.onCancel();\n    this.setState({\n      files: [],\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    Promise.all(map(this.state.files, (file) => readAsDataURL(file))).then(\n      (files) => {\n        this.props.createContent(\n          this.props.pathname,\n          map(this.state.files, (file, index) => {\n            const fields = files[index].match(/^data:(.*);(.*),(.*)$/);\n            const image = fields[1].split('/')[0] === 'image';\n            return {\n              '@type': image ? 'Image' : 'File',\n              title: file.name,\n              [image ? 'image' : 'file']: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            };\n          }),\n          SUBREQUEST,\n        );\n      },\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <Modal open={this.props.open}>\n          <Header>\n            <FormattedMessage id=\"Upload files\" defaultMessage=\"Upload files\" />\n          </Header>\n          <Dimmer active={this.props.request.loading}>\n            <Loader>\n              <FormattedMessage\n                id=\"Uploading files\"\n                defaultMessage=\"Uploading files\"\n              />\n            </Loader>\n          </Dimmer>\n          <Modal.Content>\n            <Dropzone\n              onDrop={this.onDrop}\n              className=\"dropzone\"\n              noDragEventsBubbling={true}\n              multiple={true}\n            >\n              {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps({ className: 'dashed' })}>\n                  <Segment>\n                    <Table basic=\"very\">\n                      <Table.Body>\n                        <Table.Row>\n                          <Table.Cell>\n                            <FormattedMessage\n                              id=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                              defaultMessage=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                            />\n                          </Table.Cell>\n                          <Table.Cell>\n                            <Button className=\"ui button primary\">\n                              <FormattedMessage\n                                id=\"Browse\"\n                                defaultMessage=\"Browse\"\n                              />\n                            </Button>\n                            <input\n                              {...getInputProps({\n                                type: 'file',\n                                style: { display: 'none' },\n                              })}\n                            />\n                          </Table.Cell>\n                        </Table.Row>\n                      </Table.Body>\n                    </Table>\n                  </Segment>\n                </div>\n              )}\n            </Dropzone>\n            {this.state.files.length > 0 && (\n              <Table compact singleLine>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={8}>\n                      <FormattedMessage\n                        id=\"Filename\"\n                        defaultMessage=\"Filename\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"Last modified\"\n                        defaultMessage=\"Last modified\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"File size\"\n                        defaultMessage=\"File size\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage id=\"Preview\" defaultMessage=\"Preview\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(this.state.files, (file, index) => (\n                    <Table.Row className=\"upload-row\" key={file.name}>\n                      <Table.Cell>{file.name}</Table.Cell>\n                      <Table.Cell>\n                        {file.lastModifiedDate && (\n                          <FormattedRelativeDate date={file.lastModifiedDate} />\n                        )}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {filesize(file.size, { round: 0 })}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {file.type.split('/')[0] === 'image' && (\n                          <Image src={file.preview} height={60} />\n                        )}\n                      </Table.Cell>\n                      <Table.Cell>\n                        <Icon\n                          name=\"close\"\n                          value={index}\n                          link\n                          onClick={this.onRemoveFile}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            )}\n          </Modal.Content>\n          <Modal.Actions>\n            {this.state.files.length > 0 && (\n              <Button\n                basic\n                circular\n                primary\n                floated=\"right\"\n                icon=\"arrow right\"\n                aria-label={this.props.intl.formatMessage(messages.upload, {\n                  count: this.state.files.length,\n                })}\n                onClick={this.onSubmit}\n                title={this.props.intl.formatMessage(messages.upload, {\n                  count: this.state.files.length,\n                })}\n                size=\"big\"\n              />\n            )}\n            <Button\n              basic\n              circular\n              secondary\n              icon=\"remove\"\n              aria-label={this.props.intl.formatMessage(messages.cancel)}\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              size=\"big\"\n              onClick={this.onCancel}\n            />\n          </Modal.Actions>\n        </Modal>\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.subrequests?.[SUBREQUEST] || {},\n    }),\n    { createContent },\n  ),\n)(ContentsUploadModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Cancel","defaultMessage":"Cancel"},{"id":"{count, plural, one {Upload {count} file} other {Upload {count} files}}","defaultMessage":"{count, plural, one {Upload {count} file} other {Upload {count} files}}"},{"id":"Upload files","defaultMessage":"Upload files"},{"id":"Uploading files","defaultMessage":"Uploading files"},{"id":"Drag and drop files from your computer onto this area or click the “Browse” button.","defaultMessage":"Drag and drop files from your computer onto this area or click the “Browse” button."},{"id":"Browse","defaultMessage":"Browse"},{"id":"Filename","defaultMessage":"Filename"},{"id":"Last modified","defaultMessage":"Last modified"},{"id":"File size","defaultMessage":"File size"},{"id":"Preview","defaultMessage":"Preview"}]}},"sourceType":"module"}